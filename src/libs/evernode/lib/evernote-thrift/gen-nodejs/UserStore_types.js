//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var Types_ttypes = require('./Types_types');
var ttypes = module.exports = {};
ttypes.EDAM_VERSION_MAJOR = 1
ttypes.EDAM_VERSION_MINOR = 19
var PublicUserInfo = module.exports.PublicUserInfo = function(args){
  this.userId = null
  this.shardId = null
  this.privilege = null
  this.username = null
if( args != null ){  if (null != args.userId)
  this.userId = args.userId
  if (null != args.shardId)
  this.shardId = args.shardId
  if (null != args.privilege)
  this.privilege = args.privilege
  if (null != args.username)
  this.username = args.username
}}
PublicUserInfo.prototype = {}
PublicUserInfo.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.shardId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

PublicUserInfo.prototype.write = function(output){ 
  output.writeStructBegin('PublicUserInfo')
  if (null != this.userId) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1)
    output.writeI32(this.userId)
    output.writeFieldEnd()
  }
  if (null != this.shardId) {
    output.writeFieldBegin('shardId', Thrift.Type.STRING, 2)
    output.writeString(this.shardId)
    output.writeFieldEnd()
  }
  if (null != this.privilege) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 3)
    output.writeI32(this.privilege)
    output.writeFieldEnd()
  }
  if (null != this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 4)
    output.writeString(this.username)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var AuthenticationResult = module.exports.AuthenticationResult = function(args){
  this.currentTime = null
  this.authenticationToken = null
  this.expiration = null
  this.user = null
  this.publicUserInfo = null
if( args != null ){  if (null != args.currentTime)
  this.currentTime = args.currentTime
  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.expiration)
  this.expiration = args.expiration
  if (null != args.user)
  this.user = args.user
  if (null != args.publicUserInfo)
  this.publicUserInfo = args.publicUserInfo
}}
AuthenticationResult.prototype = {}
AuthenticationResult.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I64) {
        this.expiration = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRUCT) {
        this.user = new Types_ttypes.User()
        this.user.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.STRUCT) {
        this.publicUserInfo = new ttypes.PublicUserInfo()
        this.publicUserInfo.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

AuthenticationResult.prototype.write = function(output){ 
  output.writeStructBegin('AuthenticationResult')
  if (null != this.currentTime) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1)
    output.writeI64(this.currentTime)
    output.writeFieldEnd()
  }
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 2)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.expiration) {
    output.writeFieldBegin('expiration', Thrift.Type.I64, 3)
    output.writeI64(this.expiration)
    output.writeFieldEnd()
  }
  if (null != this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 4)
    this.user.write(output)
    output.writeFieldEnd()
  }
  if (null != this.publicUserInfo) {
    output.writeFieldBegin('publicUserInfo', Thrift.Type.STRUCT, 5)
    this.publicUserInfo.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

