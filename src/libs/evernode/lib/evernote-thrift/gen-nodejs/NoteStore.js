//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var UserStore_ttypes = require('./UserStore_types')
var Types_ttypes = require('./Types_types')
var Errors_ttypes = require('./Errors_types')
var Limits_ttypes = require('./Limits_types')


var ttypes = require('./NoteStore_types');
//HELPER FUNCTIONS AND STRUCTURES

var NoteStore_getSyncState_args = function(args){
  this.authenticationToken = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
}}
NoteStore_getSyncState_args.prototype = {}
NoteStore_getSyncState_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getSyncState_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getSyncState_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getSyncState_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_getSyncState_result.prototype = {}
NoteStore_getSyncState_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SyncState()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getSyncState_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getSyncState_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getSyncChunk_args = function(args){
  this.authenticationToken = null
  this.afterUSN = null
  this.maxEntries = null
  this.fullSyncOnly = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.afterUSN)
  this.afterUSN = args.afterUSN
  if (null != args.maxEntries)
  this.maxEntries = args.maxEntries
  if (null != args.fullSyncOnly)
  this.fullSyncOnly = args.fullSyncOnly
}}
NoteStore_getSyncChunk_args.prototype = {}
NoteStore_getSyncChunk_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.afterUSN = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.maxEntries = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.BOOL) {
        this.fullSyncOnly = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getSyncChunk_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getSyncChunk_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.afterUSN) {
    output.writeFieldBegin('afterUSN', Thrift.Type.I32, 2)
    output.writeI32(this.afterUSN)
    output.writeFieldEnd()
  }
  if (null != this.maxEntries) {
    output.writeFieldBegin('maxEntries', Thrift.Type.I32, 3)
    output.writeI32(this.maxEntries)
    output.writeFieldEnd()
  }
  if (null != this.fullSyncOnly) {
    output.writeFieldBegin('fullSyncOnly', Thrift.Type.BOOL, 4)
    output.writeBool(this.fullSyncOnly)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getSyncChunk_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_getSyncChunk_result.prototype = {}
NoteStore_getSyncChunk_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SyncChunk()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getSyncChunk_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getSyncChunk_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getLinkedNotebookSyncState_args = function(args){
  this.authenticationToken = null
  this.linkedNotebook = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.linkedNotebook)
  this.linkedNotebook = args.linkedNotebook
}}
NoteStore_getLinkedNotebookSyncState_args.prototype = {}
NoteStore_getLinkedNotebookSyncState_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.linkedNotebook = new Types_ttypes.LinkedNotebook()
        this.linkedNotebook.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getLinkedNotebookSyncState_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getLinkedNotebookSyncState_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.linkedNotebook) {
    output.writeFieldBegin('linkedNotebook', Thrift.Type.STRUCT, 2)
    this.linkedNotebook.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getLinkedNotebookSyncState_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getLinkedNotebookSyncState_result.prototype = {}
NoteStore_getLinkedNotebookSyncState_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SyncState()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getLinkedNotebookSyncState_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getLinkedNotebookSyncState_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getLinkedNotebookSyncChunk_args = function(args){
  this.authenticationToken = null
  this.linkedNotebook = null
  this.afterUSN = null
  this.maxEntries = null
  this.fullSyncOnly = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.linkedNotebook)
  this.linkedNotebook = args.linkedNotebook
  if (null != args.afterUSN)
  this.afterUSN = args.afterUSN
  if (null != args.maxEntries)
  this.maxEntries = args.maxEntries
  if (null != args.fullSyncOnly)
  this.fullSyncOnly = args.fullSyncOnly
}}
NoteStore_getLinkedNotebookSyncChunk_args.prototype = {}
NoteStore_getLinkedNotebookSyncChunk_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.linkedNotebook = new Types_ttypes.LinkedNotebook()
        this.linkedNotebook.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.afterUSN = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I32) {
        this.maxEntries = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.BOOL) {
        this.fullSyncOnly = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getLinkedNotebookSyncChunk_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getLinkedNotebookSyncChunk_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.linkedNotebook) {
    output.writeFieldBegin('linkedNotebook', Thrift.Type.STRUCT, 2)
    this.linkedNotebook.write(output)
    output.writeFieldEnd()
  }
  if (null != this.afterUSN) {
    output.writeFieldBegin('afterUSN', Thrift.Type.I32, 3)
    output.writeI32(this.afterUSN)
    output.writeFieldEnd()
  }
  if (null != this.maxEntries) {
    output.writeFieldBegin('maxEntries', Thrift.Type.I32, 4)
    output.writeI32(this.maxEntries)
    output.writeFieldEnd()
  }
  if (null != this.fullSyncOnly) {
    output.writeFieldBegin('fullSyncOnly', Thrift.Type.BOOL, 5)
    output.writeBool(this.fullSyncOnly)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getLinkedNotebookSyncChunk_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getLinkedNotebookSyncChunk_result.prototype = {}
NoteStore_getLinkedNotebookSyncChunk_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SyncChunk()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getLinkedNotebookSyncChunk_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getLinkedNotebookSyncChunk_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_listNotebooks_args = function(args){
  this.authenticationToken = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
}}
NoteStore_listNotebooks_args.prototype = {}
NoteStore_listNotebooks_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_listNotebooks_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_listNotebooks_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_listNotebooks_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_listNotebooks_result.prototype = {}
NoteStore_listNotebooks_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size181 = 0
          var rtmp3
          this.success = []
          var _etype184 = 0
          rtmp3 = input.readListBegin()
          _etype184 = rtmp3.etype
          _size181 = rtmp3.size
          for (var _i185 = 0; _i185 < _size181; ++_i185)
          {
            var elem186 = null
            elem186 = new Types_ttypes.Notebook()
            elem186.read(input)
            this.success.push(elem186)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_listNotebooks_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_listNotebooks_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter187 in this.success)
        {
          if (this.success.hasOwnProperty(iter187))
          {
            iter187=this.success[iter187]
            iter187.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getNotebook_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_getNotebook_args.prototype = {}
NoteStore_getNotebook_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getNotebook_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getNotebook_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getNotebook_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getNotebook_result.prototype = {}
NoteStore_getNotebook_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Notebook()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getNotebook_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getNotebook_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getDefaultNotebook_args = function(args){
  this.authenticationToken = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
}}
NoteStore_getDefaultNotebook_args.prototype = {}
NoteStore_getDefaultNotebook_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getDefaultNotebook_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getDefaultNotebook_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getDefaultNotebook_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_getDefaultNotebook_result.prototype = {}
NoteStore_getDefaultNotebook_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Notebook()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getDefaultNotebook_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getDefaultNotebook_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_createNotebook_args = function(args){
  this.authenticationToken = null
  this.notebook = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.notebook)
  this.notebook = args.notebook
}}
NoteStore_createNotebook_args.prototype = {}
NoteStore_createNotebook_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notebook = new Types_ttypes.Notebook()
        this.notebook.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_createNotebook_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_createNotebook_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.notebook) {
    output.writeFieldBegin('notebook', Thrift.Type.STRUCT, 2)
    this.notebook.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_createNotebook_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_createNotebook_result.prototype = {}
NoteStore_createNotebook_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Notebook()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_createNotebook_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_createNotebook_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_updateNotebook_args = function(args){
  this.authenticationToken = null
  this.notebook = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.notebook)
  this.notebook = args.notebook
}}
NoteStore_updateNotebook_args.prototype = {}
NoteStore_updateNotebook_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notebook = new Types_ttypes.Notebook()
        this.notebook.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_updateNotebook_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_updateNotebook_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.notebook) {
    output.writeFieldBegin('notebook', Thrift.Type.STRUCT, 2)
    this.notebook.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_updateNotebook_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_updateNotebook_result.prototype = {}
NoteStore_updateNotebook_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_updateNotebook_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_updateNotebook_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeNotebook_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_expungeNotebook_args.prototype = {}
NoteStore_expungeNotebook_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeNotebook_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeNotebook_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeNotebook_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_expungeNotebook_result.prototype = {}
NoteStore_expungeNotebook_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeNotebook_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeNotebook_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_listTags_args = function(args){
  this.authenticationToken = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
}}
NoteStore_listTags_args.prototype = {}
NoteStore_listTags_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_listTags_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_listTags_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_listTags_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_listTags_result.prototype = {}
NoteStore_listTags_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size188 = 0
          var rtmp3
          this.success = []
          var _etype191 = 0
          rtmp3 = input.readListBegin()
          _etype191 = rtmp3.etype
          _size188 = rtmp3.size
          for (var _i192 = 0; _i192 < _size188; ++_i192)
          {
            var elem193 = null
            elem193 = new Types_ttypes.Tag()
            elem193.read(input)
            this.success.push(elem193)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_listTags_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_listTags_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter194 in this.success)
        {
          if (this.success.hasOwnProperty(iter194))
          {
            iter194=this.success[iter194]
            iter194.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_listTagsByNotebook_args = function(args){
  this.authenticationToken = null
  this.notebookGuid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.notebookGuid)
  this.notebookGuid = args.notebookGuid
}}
NoteStore_listTagsByNotebook_args.prototype = {}
NoteStore_listTagsByNotebook_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_listTagsByNotebook_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_listTagsByNotebook_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.notebookGuid) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 2)
    output.writeString(this.notebookGuid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_listTagsByNotebook_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_listTagsByNotebook_result.prototype = {}
NoteStore_listTagsByNotebook_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size195 = 0
          var rtmp3
          this.success = []
          var _etype198 = 0
          rtmp3 = input.readListBegin()
          _etype198 = rtmp3.etype
          _size195 = rtmp3.size
          for (var _i199 = 0; _i199 < _size195; ++_i199)
          {
            var elem200 = null
            elem200 = new Types_ttypes.Tag()
            elem200.read(input)
            this.success.push(elem200)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_listTagsByNotebook_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_listTagsByNotebook_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter201 in this.success)
        {
          if (this.success.hasOwnProperty(iter201))
          {
            iter201=this.success[iter201]
            iter201.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getTag_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_getTag_args.prototype = {}
NoteStore_getTag_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getTag_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getTag_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getTag_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getTag_result.prototype = {}
NoteStore_getTag_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Tag()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getTag_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getTag_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_createTag_args = function(args){
  this.authenticationToken = null
  this.tag = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.tag)
  this.tag = args.tag
}}
NoteStore_createTag_args.prototype = {}
NoteStore_createTag_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.tag = new Types_ttypes.Tag()
        this.tag.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_createTag_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_createTag_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.tag) {
    output.writeFieldBegin('tag', Thrift.Type.STRUCT, 2)
    this.tag.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_createTag_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_createTag_result.prototype = {}
NoteStore_createTag_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Tag()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_createTag_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_createTag_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_updateTag_args = function(args){
  this.authenticationToken = null
  this.tag = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.tag)
  this.tag = args.tag
}}
NoteStore_updateTag_args.prototype = {}
NoteStore_updateTag_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.tag = new Types_ttypes.Tag()
        this.tag.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_updateTag_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_updateTag_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.tag) {
    output.writeFieldBegin('tag', Thrift.Type.STRUCT, 2)
    this.tag.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_updateTag_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_updateTag_result.prototype = {}
NoteStore_updateTag_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_updateTag_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_updateTag_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_untagAll_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_untagAll_args.prototype = {}
NoteStore_untagAll_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_untagAll_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_untagAll_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_untagAll_result = function(args){
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_untagAll_result.prototype = {}
NoteStore_untagAll_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_untagAll_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_untagAll_result')
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeTag_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_expungeTag_args.prototype = {}
NoteStore_expungeTag_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeTag_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeTag_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeTag_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_expungeTag_result.prototype = {}
NoteStore_expungeTag_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeTag_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeTag_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_listSearches_args = function(args){
  this.authenticationToken = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
}}
NoteStore_listSearches_args.prototype = {}
NoteStore_listSearches_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_listSearches_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_listSearches_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_listSearches_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_listSearches_result.prototype = {}
NoteStore_listSearches_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size202 = 0
          var rtmp3
          this.success = []
          var _etype205 = 0
          rtmp3 = input.readListBegin()
          _etype205 = rtmp3.etype
          _size202 = rtmp3.size
          for (var _i206 = 0; _i206 < _size202; ++_i206)
          {
            var elem207 = null
            elem207 = new Types_ttypes.SavedSearch()
            elem207.read(input)
            this.success.push(elem207)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_listSearches_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_listSearches_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter208 in this.success)
        {
          if (this.success.hasOwnProperty(iter208))
          {
            iter208=this.success[iter208]
            iter208.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getSearch_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_getSearch_args.prototype = {}
NoteStore_getSearch_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getSearch_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getSearch_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getSearch_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getSearch_result.prototype = {}
NoteStore_getSearch_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.SavedSearch()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getSearch_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getSearch_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_createSearch_args = function(args){
  this.authenticationToken = null
  this.search = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.search)
  this.search = args.search
}}
NoteStore_createSearch_args.prototype = {}
NoteStore_createSearch_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.search = new Types_ttypes.SavedSearch()
        this.search.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_createSearch_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_createSearch_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.search) {
    output.writeFieldBegin('search', Thrift.Type.STRUCT, 2)
    this.search.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_createSearch_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_createSearch_result.prototype = {}
NoteStore_createSearch_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.SavedSearch()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_createSearch_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_createSearch_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_updateSearch_args = function(args){
  this.authenticationToken = null
  this.search = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.search)
  this.search = args.search
}}
NoteStore_updateSearch_args.prototype = {}
NoteStore_updateSearch_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.search = new Types_ttypes.SavedSearch()
        this.search.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_updateSearch_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_updateSearch_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.search) {
    output.writeFieldBegin('search', Thrift.Type.STRUCT, 2)
    this.search.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_updateSearch_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_updateSearch_result.prototype = {}
NoteStore_updateSearch_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_updateSearch_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_updateSearch_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeSearch_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_expungeSearch_args.prototype = {}
NoteStore_expungeSearch_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeSearch_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeSearch_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeSearch_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_expungeSearch_result.prototype = {}
NoteStore_expungeSearch_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeSearch_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeSearch_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_findNotes_args = function(args){
  this.authenticationToken = null
  this.filter = null
  this.offset = null
  this.maxNotes = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.filter)
  this.filter = args.filter
  if (null != args.offset)
  this.offset = args.offset
  if (null != args.maxNotes)
  this.maxNotes = args.maxNotes
}}
NoteStore_findNotes_args.prototype = {}
NoteStore_findNotes_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.NoteFilter()
        this.filter.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I32) {
        this.maxNotes = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_findNotes_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_findNotes_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.filter) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2)
    this.filter.write(output)
    output.writeFieldEnd()
  }
  if (null != this.offset) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3)
    output.writeI32(this.offset)
    output.writeFieldEnd()
  }
  if (null != this.maxNotes) {
    output.writeFieldBegin('maxNotes', Thrift.Type.I32, 4)
    output.writeI32(this.maxNotes)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_findNotes_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_findNotes_result.prototype = {}
NoteStore_findNotes_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.NoteList()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_findNotes_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_findNotes_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_findNoteOffset_args = function(args){
  this.authenticationToken = null
  this.filter = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.filter)
  this.filter = args.filter
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_findNoteOffset_args.prototype = {}
NoteStore_findNoteOffset_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.NoteFilter()
        this.filter.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_findNoteOffset_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_findNoteOffset_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.filter) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2)
    this.filter.write(output)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 3)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_findNoteOffset_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_findNoteOffset_result.prototype = {}
NoteStore_findNoteOffset_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_findNoteOffset_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_findNoteOffset_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_findNotesMetadata_args = function(args){
  this.authenticationToken = null
  this.filter = null
  this.offset = null
  this.maxNotes = null
  this.resultSpec = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.filter)
  this.filter = args.filter
  if (null != args.offset)
  this.offset = args.offset
  if (null != args.maxNotes)
  this.maxNotes = args.maxNotes
  if (null != args.resultSpec)
  this.resultSpec = args.resultSpec
}}
NoteStore_findNotesMetadata_args.prototype = {}
NoteStore_findNotesMetadata_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.NoteFilter()
        this.filter.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I32) {
        this.maxNotes = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.STRUCT) {
        this.resultSpec = new ttypes.NotesMetadataResultSpec()
        this.resultSpec.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_findNotesMetadata_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_findNotesMetadata_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.filter) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2)
    this.filter.write(output)
    output.writeFieldEnd()
  }
  if (null != this.offset) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3)
    output.writeI32(this.offset)
    output.writeFieldEnd()
  }
  if (null != this.maxNotes) {
    output.writeFieldBegin('maxNotes', Thrift.Type.I32, 4)
    output.writeI32(this.maxNotes)
    output.writeFieldEnd()
  }
  if (null != this.resultSpec) {
    output.writeFieldBegin('resultSpec', Thrift.Type.STRUCT, 5)
    this.resultSpec.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_findNotesMetadata_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_findNotesMetadata_result.prototype = {}
NoteStore_findNotesMetadata_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.NotesMetadataList()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_findNotesMetadata_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_findNotesMetadata_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_findNoteCounts_args = function(args){
  this.authenticationToken = null
  this.filter = null
  this.withTrash = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.filter)
  this.filter = args.filter
  if (null != args.withTrash)
  this.withTrash = args.withTrash
}}
NoteStore_findNoteCounts_args.prototype = {}
NoteStore_findNoteCounts_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.NoteFilter()
        this.filter.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.BOOL) {
        this.withTrash = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_findNoteCounts_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_findNoteCounts_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.filter) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2)
    this.filter.write(output)
    output.writeFieldEnd()
  }
  if (null != this.withTrash) {
    output.writeFieldBegin('withTrash', Thrift.Type.BOOL, 3)
    output.writeBool(this.withTrash)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_findNoteCounts_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_findNoteCounts_result.prototype = {}
NoteStore_findNoteCounts_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.NoteCollectionCounts()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_findNoteCounts_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_findNoteCounts_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getNote_args = function(args){
  this.authenticationToken = null
  this.guid = null
  this.withContent = null
  this.withResourcesData = null
  this.withResourcesRecognition = null
  this.withResourcesAlternateData = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
  if (null != args.withContent)
  this.withContent = args.withContent
  if (null != args.withResourcesData)
  this.withResourcesData = args.withResourcesData
  if (null != args.withResourcesRecognition)
  this.withResourcesRecognition = args.withResourcesRecognition
  if (null != args.withResourcesAlternateData)
  this.withResourcesAlternateData = args.withResourcesAlternateData
}}
NoteStore_getNote_args.prototype = {}
NoteStore_getNote_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.BOOL) {
        this.withContent = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesRecognition = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesAlternateData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getNote_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getNote_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  if (null != this.withContent) {
    output.writeFieldBegin('withContent', Thrift.Type.BOOL, 3)
    output.writeBool(this.withContent)
    output.writeFieldEnd()
  }
  if (null != this.withResourcesData) {
    output.writeFieldBegin('withResourcesData', Thrift.Type.BOOL, 4)
    output.writeBool(this.withResourcesData)
    output.writeFieldEnd()
  }
  if (null != this.withResourcesRecognition) {
    output.writeFieldBegin('withResourcesRecognition', Thrift.Type.BOOL, 5)
    output.writeBool(this.withResourcesRecognition)
    output.writeFieldEnd()
  }
  if (null != this.withResourcesAlternateData) {
    output.writeFieldBegin('withResourcesAlternateData', Thrift.Type.BOOL, 6)
    output.writeBool(this.withResourcesAlternateData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getNote_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getNote_result.prototype = {}
NoteStore_getNote_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Note()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getNote_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getNote_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getNoteContent_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_getNoteContent_args.prototype = {}
NoteStore_getNoteContent_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getNoteContent_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getNoteContent_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getNoteContent_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getNoteContent_result.prototype = {}
NoteStore_getNoteContent_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getNoteContent_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getNoteContent_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getNoteSearchText_args = function(args){
  this.authenticationToken = null
  this.guid = null
  this.noteOnly = null
  this.tokenizeForIndexing = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
  if (null != args.noteOnly)
  this.noteOnly = args.noteOnly
  if (null != args.tokenizeForIndexing)
  this.tokenizeForIndexing = args.tokenizeForIndexing
}}
NoteStore_getNoteSearchText_args.prototype = {}
NoteStore_getNoteSearchText_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.BOOL) {
        this.noteOnly = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.BOOL) {
        this.tokenizeForIndexing = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getNoteSearchText_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getNoteSearchText_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  if (null != this.noteOnly) {
    output.writeFieldBegin('noteOnly', Thrift.Type.BOOL, 3)
    output.writeBool(this.noteOnly)
    output.writeFieldEnd()
  }
  if (null != this.tokenizeForIndexing) {
    output.writeFieldBegin('tokenizeForIndexing', Thrift.Type.BOOL, 4)
    output.writeBool(this.tokenizeForIndexing)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getNoteSearchText_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getNoteSearchText_result.prototype = {}
NoteStore_getNoteSearchText_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getNoteSearchText_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getNoteSearchText_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getResourceSearchText_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_getResourceSearchText_args.prototype = {}
NoteStore_getResourceSearchText_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getResourceSearchText_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getResourceSearchText_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getResourceSearchText_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getResourceSearchText_result.prototype = {}
NoteStore_getResourceSearchText_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getResourceSearchText_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getResourceSearchText_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getNoteTagNames_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_getNoteTagNames_args.prototype = {}
NoteStore_getNoteTagNames_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getNoteTagNames_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getNoteTagNames_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getNoteTagNames_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getNoteTagNames_result.prototype = {}
NoteStore_getNoteTagNames_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size209 = 0
          var rtmp3
          this.success = []
          var _etype212 = 0
          rtmp3 = input.readListBegin()
          _etype212 = rtmp3.etype
          _size209 = rtmp3.size
          for (var _i213 = 0; _i213 < _size209; ++_i213)
          {
            var elem214 = null
            elem214 = input.readString()
            this.success.push(elem214)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getNoteTagNames_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getNoteTagNames_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter215 in this.success)
        {
          if (this.success.hasOwnProperty(iter215))
          {
            iter215=this.success[iter215]
            output.writeString(iter215)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_createNote_args = function(args){
  this.authenticationToken = null
  this.note = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.note)
  this.note = args.note
}}
NoteStore_createNote_args.prototype = {}
NoteStore_createNote_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Types_ttypes.Note()
        this.note.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_createNote_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_createNote_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.note) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2)
    this.note.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_createNote_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_createNote_result.prototype = {}
NoteStore_createNote_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Note()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_createNote_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_createNote_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_updateNote_args = function(args){
  this.authenticationToken = null
  this.note = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.note)
  this.note = args.note
}}
NoteStore_updateNote_args.prototype = {}
NoteStore_updateNote_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Types_ttypes.Note()
        this.note.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_updateNote_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_updateNote_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.note) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2)
    this.note.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_updateNote_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_updateNote_result.prototype = {}
NoteStore_updateNote_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Note()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_updateNote_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_updateNote_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_deleteNote_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_deleteNote_args.prototype = {}
NoteStore_deleteNote_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_deleteNote_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_deleteNote_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_deleteNote_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_deleteNote_result.prototype = {}
NoteStore_deleteNote_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_deleteNote_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_deleteNote_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeNote_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_expungeNote_args.prototype = {}
NoteStore_expungeNote_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeNote_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeNote_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeNote_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_expungeNote_result.prototype = {}
NoteStore_expungeNote_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeNote_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeNote_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeNotes_args = function(args){
  this.authenticationToken = null
  this.noteGuids = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.noteGuids)
  this.noteGuids = args.noteGuids
}}
NoteStore_expungeNotes_args.prototype = {}
NoteStore_expungeNotes_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.LIST) {
        {
          var _size216 = 0
          var rtmp3
          this.noteGuids = []
          var _etype219 = 0
          rtmp3 = input.readListBegin()
          _etype219 = rtmp3.etype
          _size216 = rtmp3.size
          for (var _i220 = 0; _i220 < _size216; ++_i220)
          {
            var elem221 = null
            elem221 = input.readString()
            this.noteGuids.push(elem221)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeNotes_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeNotes_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.noteGuids) {
    output.writeFieldBegin('noteGuids', Thrift.Type.LIST, 2)
    {
      output.writeListBegin(Thrift.Type.STRING, this.noteGuids.length)
      {
        for(var iter222 in this.noteGuids)
        {
          if (this.noteGuids.hasOwnProperty(iter222))
          {
            iter222=this.noteGuids[iter222]
            output.writeString(iter222)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeNotes_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_expungeNotes_result.prototype = {}
NoteStore_expungeNotes_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeNotes_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeNotes_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeInactiveNotes_args = function(args){
  this.authenticationToken = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
}}
NoteStore_expungeInactiveNotes_args.prototype = {}
NoteStore_expungeInactiveNotes_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeInactiveNotes_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeInactiveNotes_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeInactiveNotes_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_expungeInactiveNotes_result.prototype = {}
NoteStore_expungeInactiveNotes_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeInactiveNotes_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeInactiveNotes_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_copyNote_args = function(args){
  this.authenticationToken = null
  this.noteGuid = null
  this.toNotebookGuid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.noteGuid)
  this.noteGuid = args.noteGuid
  if (null != args.toNotebookGuid)
  this.toNotebookGuid = args.toNotebookGuid
}}
NoteStore_copyNote_args.prototype = {}
NoteStore_copyNote_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.toNotebookGuid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_copyNote_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_copyNote_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.noteGuid) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2)
    output.writeString(this.noteGuid)
    output.writeFieldEnd()
  }
  if (null != this.toNotebookGuid) {
    output.writeFieldBegin('toNotebookGuid', Thrift.Type.STRING, 3)
    output.writeString(this.toNotebookGuid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_copyNote_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_copyNote_result.prototype = {}
NoteStore_copyNote_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Note()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_copyNote_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_copyNote_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_listNoteVersions_args = function(args){
  this.authenticationToken = null
  this.noteGuid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.noteGuid)
  this.noteGuid = args.noteGuid
}}
NoteStore_listNoteVersions_args.prototype = {}
NoteStore_listNoteVersions_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_listNoteVersions_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_listNoteVersions_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.noteGuid) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2)
    output.writeString(this.noteGuid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_listNoteVersions_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_listNoteVersions_result.prototype = {}
NoteStore_listNoteVersions_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size223 = 0
          var rtmp3
          this.success = []
          var _etype226 = 0
          rtmp3 = input.readListBegin()
          _etype226 = rtmp3.etype
          _size223 = rtmp3.size
          for (var _i227 = 0; _i227 < _size223; ++_i227)
          {
            var elem228 = null
            elem228 = new ttypes.NoteVersionId()
            elem228.read(input)
            this.success.push(elem228)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_listNoteVersions_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_listNoteVersions_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter229 in this.success)
        {
          if (this.success.hasOwnProperty(iter229))
          {
            iter229=this.success[iter229]
            iter229.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getNoteVersion_args = function(args){
  this.authenticationToken = null
  this.noteGuid = null
  this.updateSequenceNum = null
  this.withResourcesData = null
  this.withResourcesRecognition = null
  this.withResourcesAlternateData = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.noteGuid)
  this.noteGuid = args.noteGuid
  if (null != args.updateSequenceNum)
  this.updateSequenceNum = args.updateSequenceNum
  if (null != args.withResourcesData)
  this.withResourcesData = args.withResourcesData
  if (null != args.withResourcesRecognition)
  this.withResourcesRecognition = args.withResourcesRecognition
  if (null != args.withResourcesAlternateData)
  this.withResourcesAlternateData = args.withResourcesAlternateData
}}
NoteStore_getNoteVersion_args.prototype = {}
NoteStore_getNoteVersion_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesRecognition = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.BOOL) {
        this.withResourcesAlternateData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getNoteVersion_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getNoteVersion_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.noteGuid) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2)
    output.writeString(this.noteGuid)
    output.writeFieldEnd()
  }
  if (null != this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 3)
    output.writeI32(this.updateSequenceNum)
    output.writeFieldEnd()
  }
  if (null != this.withResourcesData) {
    output.writeFieldBegin('withResourcesData', Thrift.Type.BOOL, 4)
    output.writeBool(this.withResourcesData)
    output.writeFieldEnd()
  }
  if (null != this.withResourcesRecognition) {
    output.writeFieldBegin('withResourcesRecognition', Thrift.Type.BOOL, 5)
    output.writeBool(this.withResourcesRecognition)
    output.writeFieldEnd()
  }
  if (null != this.withResourcesAlternateData) {
    output.writeFieldBegin('withResourcesAlternateData', Thrift.Type.BOOL, 6)
    output.writeBool(this.withResourcesAlternateData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getNoteVersion_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getNoteVersion_result.prototype = {}
NoteStore_getNoteVersion_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Note()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getNoteVersion_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getNoteVersion_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getResource_args = function(args){
  this.authenticationToken = null
  this.guid = null
  this.withData = null
  this.withRecognition = null
  this.withAttributes = null
  this.withAlternateData = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
  if (null != args.withData)
  this.withData = args.withData
  if (null != args.withRecognition)
  this.withRecognition = args.withRecognition
  if (null != args.withAttributes)
  this.withAttributes = args.withAttributes
  if (null != args.withAlternateData)
  this.withAlternateData = args.withAlternateData
}}
NoteStore_getResource_args.prototype = {}
NoteStore_getResource_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.BOOL) {
        this.withData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.BOOL) {
        this.withRecognition = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.BOOL) {
        this.withAttributes = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.BOOL) {
        this.withAlternateData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getResource_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getResource_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  if (null != this.withData) {
    output.writeFieldBegin('withData', Thrift.Type.BOOL, 3)
    output.writeBool(this.withData)
    output.writeFieldEnd()
  }
  if (null != this.withRecognition) {
    output.writeFieldBegin('withRecognition', Thrift.Type.BOOL, 4)
    output.writeBool(this.withRecognition)
    output.writeFieldEnd()
  }
  if (null != this.withAttributes) {
    output.writeFieldBegin('withAttributes', Thrift.Type.BOOL, 5)
    output.writeBool(this.withAttributes)
    output.writeFieldEnd()
  }
  if (null != this.withAlternateData) {
    output.writeFieldBegin('withAlternateData', Thrift.Type.BOOL, 6)
    output.writeBool(this.withAlternateData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getResource_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getResource_result.prototype = {}
NoteStore_getResource_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Resource()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getResource_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getResource_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_updateResource_args = function(args){
  this.authenticationToken = null
  this.resource = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.resource)
  this.resource = args.resource
}}
NoteStore_updateResource_args.prototype = {}
NoteStore_updateResource_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.resource = new Types_ttypes.Resource()
        this.resource.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_updateResource_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_updateResource_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.resource) {
    output.writeFieldBegin('resource', Thrift.Type.STRUCT, 2)
    this.resource.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_updateResource_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_updateResource_result.prototype = {}
NoteStore_updateResource_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_updateResource_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_updateResource_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getResourceData_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_getResourceData_args.prototype = {}
NoteStore_getResourceData_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getResourceData_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getResourceData_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getResourceData_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getResourceData_result.prototype = {}
NoteStore_getResourceData_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getResourceData_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getResourceData_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getResourceByHash_args = function(args){
  this.authenticationToken = null
  this.noteGuid = null
  this.contentHash = null
  this.withData = null
  this.withRecognition = null
  this.withAlternateData = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.noteGuid)
  this.noteGuid = args.noteGuid
  if (null != args.contentHash)
  this.contentHash = args.contentHash
  if (null != args.withData)
  this.withData = args.withData
  if (null != args.withRecognition)
  this.withRecognition = args.withRecognition
  if (null != args.withAlternateData)
  this.withAlternateData = args.withAlternateData
}}
NoteStore_getResourceByHash_args.prototype = {}
NoteStore_getResourceByHash_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.contentHash = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.BOOL) {
        this.withData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.BOOL) {
        this.withRecognition = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.BOOL) {
        this.withAlternateData = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getResourceByHash_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getResourceByHash_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.noteGuid) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2)
    output.writeString(this.noteGuid)
    output.writeFieldEnd()
  }
  if (null != this.contentHash) {
    output.writeFieldBegin('contentHash', Thrift.Type.STRING, 3)
    output.writeString(this.contentHash)
    output.writeFieldEnd()
  }
  if (null != this.withData) {
    output.writeFieldBegin('withData', Thrift.Type.BOOL, 4)
    output.writeBool(this.withData)
    output.writeFieldEnd()
  }
  if (null != this.withRecognition) {
    output.writeFieldBegin('withRecognition', Thrift.Type.BOOL, 5)
    output.writeBool(this.withRecognition)
    output.writeFieldEnd()
  }
  if (null != this.withAlternateData) {
    output.writeFieldBegin('withAlternateData', Thrift.Type.BOOL, 6)
    output.writeBool(this.withAlternateData)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getResourceByHash_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getResourceByHash_result.prototype = {}
NoteStore_getResourceByHash_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Resource()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getResourceByHash_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getResourceByHash_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getResourceRecognition_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_getResourceRecognition_args.prototype = {}
NoteStore_getResourceRecognition_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getResourceRecognition_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getResourceRecognition_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getResourceRecognition_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getResourceRecognition_result.prototype = {}
NoteStore_getResourceRecognition_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getResourceRecognition_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getResourceRecognition_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getResourceAlternateData_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_getResourceAlternateData_args.prototype = {}
NoteStore_getResourceAlternateData_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getResourceAlternateData_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getResourceAlternateData_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getResourceAlternateData_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getResourceAlternateData_result.prototype = {}
NoteStore_getResourceAlternateData_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getResourceAlternateData_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getResourceAlternateData_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getResourceAttributes_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_getResourceAttributes_args.prototype = {}
NoteStore_getResourceAttributes_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getResourceAttributes_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getResourceAttributes_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getResourceAttributes_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getResourceAttributes_result.prototype = {}
NoteStore_getResourceAttributes_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.ResourceAttributes()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getResourceAttributes_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getResourceAttributes_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getAccountSize_args = function(args){
  this.authenticationToken = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
}}
NoteStore_getAccountSize_args.prototype = {}
NoteStore_getAccountSize_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getAccountSize_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getAccountSize_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getAccountSize_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_getAccountSize_result.prototype = {}
NoteStore_getAccountSize_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getAccountSize_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getAccountSize_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0)
    output.writeI64(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getAds_args = function(args){
  this.authenticationToken = null
  this.adParameters = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.adParameters)
  this.adParameters = args.adParameters
}}
NoteStore_getAds_args.prototype = {}
NoteStore_getAds_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.adParameters = new ttypes.AdParameters()
        this.adParameters.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getAds_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getAds_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.adParameters) {
    output.writeFieldBegin('adParameters', Thrift.Type.STRUCT, 2)
    this.adParameters.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getAds_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_getAds_result.prototype = {}
NoteStore_getAds_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size230 = 0
          var rtmp3
          this.success = []
          var _etype233 = 0
          rtmp3 = input.readListBegin()
          _etype233 = rtmp3.etype
          _size230 = rtmp3.size
          for (var _i234 = 0; _i234 < _size230; ++_i234)
          {
            var elem235 = null
            elem235 = new Types_ttypes.Ad()
            elem235.read(input)
            this.success.push(elem235)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getAds_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getAds_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter236 in this.success)
        {
          if (this.success.hasOwnProperty(iter236))
          {
            iter236=this.success[iter236]
            iter236.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getRandomAd_args = function(args){
  this.authenticationToken = null
  this.adParameters = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.adParameters)
  this.adParameters = args.adParameters
}}
NoteStore_getRandomAd_args.prototype = {}
NoteStore_getRandomAd_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.adParameters = new ttypes.AdParameters()
        this.adParameters.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getRandomAd_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getRandomAd_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.adParameters) {
    output.writeFieldBegin('adParameters', Thrift.Type.STRUCT, 2)
    this.adParameters.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getRandomAd_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_getRandomAd_result.prototype = {}
NoteStore_getRandomAd_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Ad()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getRandomAd_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getRandomAd_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getPublicNotebook_args = function(args){
  this.userId = null
  this.publicUri = null
if( args != null ){  if (null != args.userId)
  this.userId = args.userId
  if (null != args.publicUri)
  this.publicUri = args.publicUri
}}
NoteStore_getPublicNotebook_args.prototype = {}
NoteStore_getPublicNotebook_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.publicUri = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getPublicNotebook_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getPublicNotebook_args')
  if (null != this.userId) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 1)
    output.writeI32(this.userId)
    output.writeFieldEnd()
  }
  if (null != this.publicUri) {
    output.writeFieldBegin('publicUri', Thrift.Type.STRING, 2)
    output.writeString(this.publicUri)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getPublicNotebook_result = function(args){
  this.success = null
  this.systemException = null
  this.notFoundException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
}}
NoteStore_getPublicNotebook_result.prototype = {}
NoteStore_getPublicNotebook_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Notebook()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getPublicNotebook_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getPublicNotebook_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_createSharedNotebook_args = function(args){
  this.authenticationToken = null
  this.sharedNotebook = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.sharedNotebook)
  this.sharedNotebook = args.sharedNotebook
}}
NoteStore_createSharedNotebook_args.prototype = {}
NoteStore_createSharedNotebook_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.sharedNotebook = new Types_ttypes.SharedNotebook()
        this.sharedNotebook.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_createSharedNotebook_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_createSharedNotebook_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.sharedNotebook) {
    output.writeFieldBegin('sharedNotebook', Thrift.Type.STRUCT, 2)
    this.sharedNotebook.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_createSharedNotebook_result = function(args){
  this.success = null
  this.userException = null
  this.notFoundException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_createSharedNotebook_result.prototype = {}
NoteStore_createSharedNotebook_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.SharedNotebook()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_createSharedNotebook_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_createSharedNotebook_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_listSharedNotebooks_args = function(args){
  this.authenticationToken = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
}}
NoteStore_listSharedNotebooks_args.prototype = {}
NoteStore_listSharedNotebooks_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_listSharedNotebooks_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_listSharedNotebooks_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_listSharedNotebooks_result = function(args){
  this.success = null
  this.userException = null
  this.notFoundException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_listSharedNotebooks_result.prototype = {}
NoteStore_listSharedNotebooks_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size237 = 0
          var rtmp3
          this.success = []
          var _etype240 = 0
          rtmp3 = input.readListBegin()
          _etype240 = rtmp3.etype
          _size237 = rtmp3.size
          for (var _i241 = 0; _i241 < _size237; ++_i241)
          {
            var elem242 = null
            elem242 = new Types_ttypes.SharedNotebook()
            elem242.read(input)
            this.success.push(elem242)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_listSharedNotebooks_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_listSharedNotebooks_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter243 in this.success)
        {
          if (this.success.hasOwnProperty(iter243))
          {
            iter243=this.success[iter243]
            iter243.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeSharedNotebooks_args = function(args){
  this.authenticationToken = null
  this.sharedNotebookIds = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.sharedNotebookIds)
  this.sharedNotebookIds = args.sharedNotebookIds
}}
NoteStore_expungeSharedNotebooks_args.prototype = {}
NoteStore_expungeSharedNotebooks_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.LIST) {
        {
          var _size244 = 0
          var rtmp3
          this.sharedNotebookIds = []
          var _etype247 = 0
          rtmp3 = input.readListBegin()
          _etype247 = rtmp3.etype
          _size244 = rtmp3.size
          for (var _i248 = 0; _i248 < _size244; ++_i248)
          {
            var elem249 = null
            elem249 = input.readI64()
            this.sharedNotebookIds.push(elem249)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeSharedNotebooks_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeSharedNotebooks_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.sharedNotebookIds) {
    output.writeFieldBegin('sharedNotebookIds', Thrift.Type.LIST, 2)
    {
      output.writeListBegin(Thrift.Type.I64, this.sharedNotebookIds.length)
      {
        for(var iter250 in this.sharedNotebookIds)
        {
          if (this.sharedNotebookIds.hasOwnProperty(iter250))
          {
            iter250=this.sharedNotebookIds[iter250]
            output.writeI64(iter250)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeSharedNotebooks_result = function(args){
  this.success = null
  this.userException = null
  this.notFoundException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_expungeSharedNotebooks_result.prototype = {}
NoteStore_expungeSharedNotebooks_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeSharedNotebooks_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeSharedNotebooks_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_createLinkedNotebook_args = function(args){
  this.authenticationToken = null
  this.linkedNotebook = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.linkedNotebook)
  this.linkedNotebook = args.linkedNotebook
}}
NoteStore_createLinkedNotebook_args.prototype = {}
NoteStore_createLinkedNotebook_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.linkedNotebook = new Types_ttypes.LinkedNotebook()
        this.linkedNotebook.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_createLinkedNotebook_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_createLinkedNotebook_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.linkedNotebook) {
    output.writeFieldBegin('linkedNotebook', Thrift.Type.STRUCT, 2)
    this.linkedNotebook.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_createLinkedNotebook_result = function(args){
  this.success = null
  this.userException = null
  this.notFoundException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_createLinkedNotebook_result.prototype = {}
NoteStore_createLinkedNotebook_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.LinkedNotebook()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_createLinkedNotebook_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_createLinkedNotebook_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_updateLinkedNotebook_args = function(args){
  this.authenticationToken = null
  this.linkedNotebook = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.linkedNotebook)
  this.linkedNotebook = args.linkedNotebook
}}
NoteStore_updateLinkedNotebook_args.prototype = {}
NoteStore_updateLinkedNotebook_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.linkedNotebook = new Types_ttypes.LinkedNotebook()
        this.linkedNotebook.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_updateLinkedNotebook_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_updateLinkedNotebook_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.linkedNotebook) {
    output.writeFieldBegin('linkedNotebook', Thrift.Type.STRUCT, 2)
    this.linkedNotebook.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_updateLinkedNotebook_result = function(args){
  this.success = null
  this.userException = null
  this.notFoundException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_updateLinkedNotebook_result.prototype = {}
NoteStore_updateLinkedNotebook_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_updateLinkedNotebook_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_updateLinkedNotebook_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_listLinkedNotebooks_args = function(args){
  this.authenticationToken = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
}}
NoteStore_listLinkedNotebooks_args.prototype = {}
NoteStore_listLinkedNotebooks_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_listLinkedNotebooks_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_listLinkedNotebooks_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_listLinkedNotebooks_result = function(args){
  this.success = null
  this.userException = null
  this.notFoundException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_listLinkedNotebooks_result.prototype = {}
NoteStore_listLinkedNotebooks_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size251 = 0
          var rtmp3
          this.success = []
          var _etype254 = 0
          rtmp3 = input.readListBegin()
          _etype254 = rtmp3.etype
          _size251 = rtmp3.size
          for (var _i255 = 0; _i255 < _size251; ++_i255)
          {
            var elem256 = null
            elem256 = new Types_ttypes.LinkedNotebook()
            elem256.read(input)
            this.success.push(elem256)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_listLinkedNotebooks_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_listLinkedNotebooks_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter257 in this.success)
        {
          if (this.success.hasOwnProperty(iter257))
          {
            iter257=this.success[iter257]
            iter257.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeLinkedNotebook_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_expungeLinkedNotebook_args.prototype = {}
NoteStore_expungeLinkedNotebook_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeLinkedNotebook_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeLinkedNotebook_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_expungeLinkedNotebook_result = function(args){
  this.success = null
  this.userException = null
  this.notFoundException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_expungeLinkedNotebook_result.prototype = {}
NoteStore_expungeLinkedNotebook_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_expungeLinkedNotebook_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_expungeLinkedNotebook_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_authenticateToSharedNotebook_args = function(args){
  this.shareKey = null
  this.authenticationToken = null
if( args != null ){  if (null != args.shareKey)
  this.shareKey = args.shareKey
  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
}}
NoteStore_authenticateToSharedNotebook_args.prototype = {}
NoteStore_authenticateToSharedNotebook_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.shareKey = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_authenticateToSharedNotebook_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_authenticateToSharedNotebook_args')
  if (null != this.shareKey) {
    output.writeFieldBegin('shareKey', Thrift.Type.STRING, 1)
    output.writeString(this.shareKey)
    output.writeFieldEnd()
  }
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 2)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_authenticateToSharedNotebook_result = function(args){
  this.success = null
  this.userException = null
  this.notFoundException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_authenticateToSharedNotebook_result.prototype = {}
NoteStore_authenticateToSharedNotebook_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UserStore_ttypes.AuthenticationResult()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_authenticateToSharedNotebook_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_authenticateToSharedNotebook_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getSharedNotebookByAuth_args = function(args){
  this.authenticationToken = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
}}
NoteStore_getSharedNotebookByAuth_args.prototype = {}
NoteStore_getSharedNotebookByAuth_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getSharedNotebookByAuth_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getSharedNotebookByAuth_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_getSharedNotebookByAuth_result = function(args){
  this.success = null
  this.userException = null
  this.notFoundException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_getSharedNotebookByAuth_result.prototype = {}
NoteStore_getSharedNotebookByAuth_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.SharedNotebook()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_getSharedNotebookByAuth_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_getSharedNotebookByAuth_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_emailNote_args = function(args){
  this.authenticationToken = null
  this.parameters = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.parameters)
  this.parameters = args.parameters
}}
NoteStore_emailNote_args.prototype = {}
NoteStore_emailNote_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.parameters = new ttypes.NoteEmailParameters()
        this.parameters.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_emailNote_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_emailNote_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.parameters) {
    output.writeFieldBegin('parameters', Thrift.Type.STRUCT, 2)
    this.parameters.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_emailNote_result = function(args){
  this.userException = null
  this.notFoundException = null
  this.systemException = null
if( args != null ){  if (null != args.userException)
  this.userException = args.userException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_emailNote_result.prototype = {}
NoteStore_emailNote_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_emailNote_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_emailNote_result')
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_shareNote_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_shareNote_args.prototype = {}
NoteStore_shareNote_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_shareNote_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_shareNote_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_shareNote_result = function(args){
  this.success = null
  this.userException = null
  this.notFoundException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_shareNote_result.prototype = {}
NoteStore_shareNote_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_shareNote_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_shareNote_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeString(this.success)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_stopSharingNote_args = function(args){
  this.authenticationToken = null
  this.guid = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
  if (null != args.guid)
  this.guid = args.guid
}}
NoteStore_stopSharingNote_args.prototype = {}
NoteStore_stopSharingNote_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_stopSharingNote_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_stopSharingNote_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 2)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_stopSharingNote_result = function(args){
  this.userException = null
  this.notFoundException = null
  this.systemException = null
if( args != null ){  if (null != args.userException)
  this.userException = args.userException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_stopSharingNote_result.prototype = {}
NoteStore_stopSharingNote_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_stopSharingNote_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_stopSharingNote_result')
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_authenticateToSharedNote_args = function(args){
  this.guid = null
  this.noteKey = null
if( args != null ){  if (null != args.guid)
  this.guid = args.guid
  if (null != args.noteKey)
  this.noteKey = args.noteKey
}}
NoteStore_authenticateToSharedNote_args.prototype = {}
NoteStore_authenticateToSharedNote_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.noteKey = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_authenticateToSharedNote_args.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_authenticateToSharedNote_args')
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  if (null != this.noteKey) {
    output.writeFieldBegin('noteKey', Thrift.Type.STRING, 2)
    output.writeString(this.noteKey)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStore_authenticateToSharedNote_result = function(args){
  this.success = null
  this.userException = null
  this.notFoundException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
NoteStore_authenticateToSharedNote_result.prototype = {}
NoteStore_authenticateToSharedNote_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UserStore_ttypes.AuthenticationResult()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteStore_authenticateToSharedNote_result.prototype.write = function(output){ 
  output.writeStructBegin('NoteStore_authenticateToSharedNote_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 3)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteStoreClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {}
}
NoteStoreClient.prototype = {}
NoteStoreClient.prototype.getSyncState = function(authenticationToken,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getSyncState(authenticationToken)
}

NoteStoreClient.prototype.send_getSyncState = function(authenticationToken){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSyncState', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getSyncState_args()
  args.authenticationToken = authenticationToken
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getSyncState = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getSyncState_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getSyncState failed: unknown result");
}
NoteStoreClient.prototype.getSyncChunk = function(authenticationToken,afterUSN,maxEntries,fullSyncOnly,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getSyncChunk(authenticationToken, afterUSN, maxEntries, fullSyncOnly)
}

NoteStoreClient.prototype.send_getSyncChunk = function(authenticationToken,afterUSN,maxEntries,fullSyncOnly){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSyncChunk', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getSyncChunk_args()
  args.authenticationToken = authenticationToken
  args.afterUSN = afterUSN
  args.maxEntries = maxEntries
  args.fullSyncOnly = fullSyncOnly
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getSyncChunk = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getSyncChunk_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getSyncChunk failed: unknown result");
}
NoteStoreClient.prototype.getLinkedNotebookSyncState = function(authenticationToken,linkedNotebook,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getLinkedNotebookSyncState(authenticationToken, linkedNotebook)
}

NoteStoreClient.prototype.send_getLinkedNotebookSyncState = function(authenticationToken,linkedNotebook){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLinkedNotebookSyncState', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getLinkedNotebookSyncState_args()
  args.authenticationToken = authenticationToken
  args.linkedNotebook = linkedNotebook
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getLinkedNotebookSyncState = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getLinkedNotebookSyncState_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getLinkedNotebookSyncState failed: unknown result");
}
NoteStoreClient.prototype.getLinkedNotebookSyncChunk = function(authenticationToken,linkedNotebook,afterUSN,maxEntries,fullSyncOnly,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly)
}

NoteStoreClient.prototype.send_getLinkedNotebookSyncChunk = function(authenticationToken,linkedNotebook,afterUSN,maxEntries,fullSyncOnly){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLinkedNotebookSyncChunk', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getLinkedNotebookSyncChunk_args()
  args.authenticationToken = authenticationToken
  args.linkedNotebook = linkedNotebook
  args.afterUSN = afterUSN
  args.maxEntries = maxEntries
  args.fullSyncOnly = fullSyncOnly
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getLinkedNotebookSyncChunk = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getLinkedNotebookSyncChunk_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getLinkedNotebookSyncChunk failed: unknown result");
}
NoteStoreClient.prototype.listNotebooks = function(authenticationToken,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_listNotebooks(authenticationToken)
}

NoteStoreClient.prototype.send_listNotebooks = function(authenticationToken){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listNotebooks', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_listNotebooks_args()
  args.authenticationToken = authenticationToken
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_listNotebooks = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_listNotebooks_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("listNotebooks failed: unknown result");
}
NoteStoreClient.prototype.getNotebook = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getNotebook(authenticationToken, guid)
}

NoteStoreClient.prototype.send_getNotebook = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNotebook', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getNotebook_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getNotebook = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getNotebook_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getNotebook failed: unknown result");
}
NoteStoreClient.prototype.getDefaultNotebook = function(authenticationToken,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getDefaultNotebook(authenticationToken)
}

NoteStoreClient.prototype.send_getDefaultNotebook = function(authenticationToken){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDefaultNotebook', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getDefaultNotebook_args()
  args.authenticationToken = authenticationToken
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getDefaultNotebook = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getDefaultNotebook_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getDefaultNotebook failed: unknown result");
}
NoteStoreClient.prototype.createNotebook = function(authenticationToken,notebook,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_createNotebook(authenticationToken, notebook)
}

NoteStoreClient.prototype.send_createNotebook = function(authenticationToken,notebook){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createNotebook', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_createNotebook_args()
  args.authenticationToken = authenticationToken
  args.notebook = notebook
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_createNotebook = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_createNotebook_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("createNotebook failed: unknown result");
}
NoteStoreClient.prototype.updateNotebook = function(authenticationToken,notebook,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_updateNotebook(authenticationToken, notebook)
}

NoteStoreClient.prototype.send_updateNotebook = function(authenticationToken,notebook){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateNotebook', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_updateNotebook_args()
  args.authenticationToken = authenticationToken
  args.notebook = notebook
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_updateNotebook = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_updateNotebook_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("updateNotebook failed: unknown result");
}
NoteStoreClient.prototype.expungeNotebook = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_expungeNotebook(authenticationToken, guid)
}

NoteStoreClient.prototype.send_expungeNotebook = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('expungeNotebook', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_expungeNotebook_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_expungeNotebook = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_expungeNotebook_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("expungeNotebook failed: unknown result");
}
NoteStoreClient.prototype.listTags = function(authenticationToken,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_listTags(authenticationToken)
}

NoteStoreClient.prototype.send_listTags = function(authenticationToken){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listTags', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_listTags_args()
  args.authenticationToken = authenticationToken
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_listTags = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_listTags_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("listTags failed: unknown result");
}
NoteStoreClient.prototype.listTagsByNotebook = function(authenticationToken,notebookGuid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_listTagsByNotebook(authenticationToken, notebookGuid)
}

NoteStoreClient.prototype.send_listTagsByNotebook = function(authenticationToken,notebookGuid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listTagsByNotebook', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_listTagsByNotebook_args()
  args.authenticationToken = authenticationToken
  args.notebookGuid = notebookGuid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_listTagsByNotebook = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_listTagsByNotebook_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("listTagsByNotebook failed: unknown result");
}
NoteStoreClient.prototype.getTag = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getTag(authenticationToken, guid)
}

NoteStoreClient.prototype.send_getTag = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTag', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getTag_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getTag = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getTag_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getTag failed: unknown result");
}
NoteStoreClient.prototype.createTag = function(authenticationToken,tag,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_createTag(authenticationToken, tag)
}

NoteStoreClient.prototype.send_createTag = function(authenticationToken,tag){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createTag', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_createTag_args()
  args.authenticationToken = authenticationToken
  args.tag = tag
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_createTag = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_createTag_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("createTag failed: unknown result");
}
NoteStoreClient.prototype.updateTag = function(authenticationToken,tag,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_updateTag(authenticationToken, tag)
}

NoteStoreClient.prototype.send_updateTag = function(authenticationToken,tag){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateTag', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_updateTag_args()
  args.authenticationToken = authenticationToken
  args.tag = tag
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_updateTag = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_updateTag_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("updateTag failed: unknown result");
}
NoteStoreClient.prototype.untagAll = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_untagAll(authenticationToken, guid)
}

NoteStoreClient.prototype.send_untagAll = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('untagAll', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_untagAll_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_untagAll = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_untagAll_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  callback(null)
}
NoteStoreClient.prototype.expungeTag = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_expungeTag(authenticationToken, guid)
}

NoteStoreClient.prototype.send_expungeTag = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('expungeTag', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_expungeTag_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_expungeTag = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_expungeTag_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("expungeTag failed: unknown result");
}
NoteStoreClient.prototype.listSearches = function(authenticationToken,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_listSearches(authenticationToken)
}

NoteStoreClient.prototype.send_listSearches = function(authenticationToken){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listSearches', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_listSearches_args()
  args.authenticationToken = authenticationToken
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_listSearches = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_listSearches_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("listSearches failed: unknown result");
}
NoteStoreClient.prototype.getSearch = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getSearch(authenticationToken, guid)
}

NoteStoreClient.prototype.send_getSearch = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSearch', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getSearch_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getSearch = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getSearch_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getSearch failed: unknown result");
}
NoteStoreClient.prototype.createSearch = function(authenticationToken,search,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_createSearch(authenticationToken, search)
}

NoteStoreClient.prototype.send_createSearch = function(authenticationToken,search){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createSearch', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_createSearch_args()
  args.authenticationToken = authenticationToken
  args.search = search
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_createSearch = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_createSearch_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("createSearch failed: unknown result");
}
NoteStoreClient.prototype.updateSearch = function(authenticationToken,search,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_updateSearch(authenticationToken, search)
}

NoteStoreClient.prototype.send_updateSearch = function(authenticationToken,search){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateSearch', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_updateSearch_args()
  args.authenticationToken = authenticationToken
  args.search = search
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_updateSearch = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_updateSearch_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("updateSearch failed: unknown result");
}
NoteStoreClient.prototype.expungeSearch = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_expungeSearch(authenticationToken, guid)
}

NoteStoreClient.prototype.send_expungeSearch = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('expungeSearch', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_expungeSearch_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_expungeSearch = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_expungeSearch_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("expungeSearch failed: unknown result");
}
NoteStoreClient.prototype.findNotes = function(authenticationToken,filter,offset,maxNotes,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_findNotes(authenticationToken, filter, offset, maxNotes)
}

NoteStoreClient.prototype.send_findNotes = function(authenticationToken,filter,offset,maxNotes){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findNotes', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_findNotes_args()
  args.authenticationToken = authenticationToken
  args.filter = filter
  args.offset = offset
  args.maxNotes = maxNotes
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_findNotes = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_findNotes_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("findNotes failed: unknown result");
}
NoteStoreClient.prototype.findNoteOffset = function(authenticationToken,filter,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_findNoteOffset(authenticationToken, filter, guid)
}

NoteStoreClient.prototype.send_findNoteOffset = function(authenticationToken,filter,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findNoteOffset', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_findNoteOffset_args()
  args.authenticationToken = authenticationToken
  args.filter = filter
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_findNoteOffset = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_findNoteOffset_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("findNoteOffset failed: unknown result");
}
NoteStoreClient.prototype.findNotesMetadata = function(authenticationToken,filter,offset,maxNotes,resultSpec,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_findNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec)
}

NoteStoreClient.prototype.send_findNotesMetadata = function(authenticationToken,filter,offset,maxNotes,resultSpec){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findNotesMetadata', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_findNotesMetadata_args()
  args.authenticationToken = authenticationToken
  args.filter = filter
  args.offset = offset
  args.maxNotes = maxNotes
  args.resultSpec = resultSpec
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_findNotesMetadata = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_findNotesMetadata_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("findNotesMetadata failed: unknown result");
}
NoteStoreClient.prototype.findNoteCounts = function(authenticationToken,filter,withTrash,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_findNoteCounts(authenticationToken, filter, withTrash)
}

NoteStoreClient.prototype.send_findNoteCounts = function(authenticationToken,filter,withTrash){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findNoteCounts', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_findNoteCounts_args()
  args.authenticationToken = authenticationToken
  args.filter = filter
  args.withTrash = withTrash
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_findNoteCounts = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_findNoteCounts_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("findNoteCounts failed: unknown result");
}
NoteStoreClient.prototype.getNote = function(authenticationToken,guid,withContent,withResourcesData,withResourcesRecognition,withResourcesAlternateData,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData)
}

NoteStoreClient.prototype.send_getNote = function(authenticationToken,guid,withContent,withResourcesData,withResourcesRecognition,withResourcesAlternateData){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNote', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getNote_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.withContent = withContent
  args.withResourcesData = withResourcesData
  args.withResourcesRecognition = withResourcesRecognition
  args.withResourcesAlternateData = withResourcesAlternateData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getNote = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getNote_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getNote failed: unknown result");
}
NoteStoreClient.prototype.getNoteContent = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getNoteContent(authenticationToken, guid)
}

NoteStoreClient.prototype.send_getNoteContent = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNoteContent', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getNoteContent_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getNoteContent = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getNoteContent_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getNoteContent failed: unknown result");
}
NoteStoreClient.prototype.getNoteSearchText = function(authenticationToken,guid,noteOnly,tokenizeForIndexing,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing)
}

NoteStoreClient.prototype.send_getNoteSearchText = function(authenticationToken,guid,noteOnly,tokenizeForIndexing){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNoteSearchText', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getNoteSearchText_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.noteOnly = noteOnly
  args.tokenizeForIndexing = tokenizeForIndexing
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getNoteSearchText = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getNoteSearchText_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getNoteSearchText failed: unknown result");
}
NoteStoreClient.prototype.getResourceSearchText = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getResourceSearchText(authenticationToken, guid)
}

NoteStoreClient.prototype.send_getResourceSearchText = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getResourceSearchText', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getResourceSearchText_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getResourceSearchText = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getResourceSearchText_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getResourceSearchText failed: unknown result");
}
NoteStoreClient.prototype.getNoteTagNames = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getNoteTagNames(authenticationToken, guid)
}

NoteStoreClient.prototype.send_getNoteTagNames = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNoteTagNames', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getNoteTagNames_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getNoteTagNames = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getNoteTagNames_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getNoteTagNames failed: unknown result");
}
NoteStoreClient.prototype.createNote = function(authenticationToken,note,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_createNote(authenticationToken, note)
}

NoteStoreClient.prototype.send_createNote = function(authenticationToken,note){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createNote', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_createNote_args()
  args.authenticationToken = authenticationToken
  args.note = note
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_createNote = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_createNote_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("createNote failed: unknown result");
}
NoteStoreClient.prototype.updateNote = function(authenticationToken,note,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_updateNote(authenticationToken, note)
}

NoteStoreClient.prototype.send_updateNote = function(authenticationToken,note){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateNote', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_updateNote_args()
  args.authenticationToken = authenticationToken
  args.note = note
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_updateNote = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_updateNote_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("updateNote failed: unknown result");
}
NoteStoreClient.prototype.deleteNote = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_deleteNote(authenticationToken, guid)
}

NoteStoreClient.prototype.send_deleteNote = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteNote', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_deleteNote_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_deleteNote = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_deleteNote_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("deleteNote failed: unknown result");
}
NoteStoreClient.prototype.expungeNote = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_expungeNote(authenticationToken, guid)
}

NoteStoreClient.prototype.send_expungeNote = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('expungeNote', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_expungeNote_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_expungeNote = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_expungeNote_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("expungeNote failed: unknown result");
}
NoteStoreClient.prototype.expungeNotes = function(authenticationToken,noteGuids,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_expungeNotes(authenticationToken, noteGuids)
}

NoteStoreClient.prototype.send_expungeNotes = function(authenticationToken,noteGuids){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('expungeNotes', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_expungeNotes_args()
  args.authenticationToken = authenticationToken
  args.noteGuids = noteGuids
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_expungeNotes = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_expungeNotes_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("expungeNotes failed: unknown result");
}
NoteStoreClient.prototype.expungeInactiveNotes = function(authenticationToken,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_expungeInactiveNotes(authenticationToken)
}

NoteStoreClient.prototype.send_expungeInactiveNotes = function(authenticationToken){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('expungeInactiveNotes', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_expungeInactiveNotes_args()
  args.authenticationToken = authenticationToken
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_expungeInactiveNotes = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_expungeInactiveNotes_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("expungeInactiveNotes failed: unknown result");
}
NoteStoreClient.prototype.copyNote = function(authenticationToken,noteGuid,toNotebookGuid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_copyNote(authenticationToken, noteGuid, toNotebookGuid)
}

NoteStoreClient.prototype.send_copyNote = function(authenticationToken,noteGuid,toNotebookGuid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('copyNote', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_copyNote_args()
  args.authenticationToken = authenticationToken
  args.noteGuid = noteGuid
  args.toNotebookGuid = toNotebookGuid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_copyNote = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_copyNote_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("copyNote failed: unknown result");
}
NoteStoreClient.prototype.listNoteVersions = function(authenticationToken,noteGuid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_listNoteVersions(authenticationToken, noteGuid)
}

NoteStoreClient.prototype.send_listNoteVersions = function(authenticationToken,noteGuid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listNoteVersions', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_listNoteVersions_args()
  args.authenticationToken = authenticationToken
  args.noteGuid = noteGuid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_listNoteVersions = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_listNoteVersions_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("listNoteVersions failed: unknown result");
}
NoteStoreClient.prototype.getNoteVersion = function(authenticationToken,noteGuid,updateSequenceNum,withResourcesData,withResourcesRecognition,withResourcesAlternateData,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData)
}

NoteStoreClient.prototype.send_getNoteVersion = function(authenticationToken,noteGuid,updateSequenceNum,withResourcesData,withResourcesRecognition,withResourcesAlternateData){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNoteVersion', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getNoteVersion_args()
  args.authenticationToken = authenticationToken
  args.noteGuid = noteGuid
  args.updateSequenceNum = updateSequenceNum
  args.withResourcesData = withResourcesData
  args.withResourcesRecognition = withResourcesRecognition
  args.withResourcesAlternateData = withResourcesAlternateData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getNoteVersion = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getNoteVersion_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getNoteVersion failed: unknown result");
}
NoteStoreClient.prototype.getResource = function(authenticationToken,guid,withData,withRecognition,withAttributes,withAlternateData,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData)
}

NoteStoreClient.prototype.send_getResource = function(authenticationToken,guid,withData,withRecognition,withAttributes,withAlternateData){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getResource', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getResource_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.withData = withData
  args.withRecognition = withRecognition
  args.withAttributes = withAttributes
  args.withAlternateData = withAlternateData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getResource = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getResource_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getResource failed: unknown result");
}
NoteStoreClient.prototype.updateResource = function(authenticationToken,resource,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_updateResource(authenticationToken, resource)
}

NoteStoreClient.prototype.send_updateResource = function(authenticationToken,resource){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateResource', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_updateResource_args()
  args.authenticationToken = authenticationToken
  args.resource = resource
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_updateResource = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_updateResource_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("updateResource failed: unknown result");
}
NoteStoreClient.prototype.getResourceData = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getResourceData(authenticationToken, guid)
}

NoteStoreClient.prototype.send_getResourceData = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getResourceData', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getResourceData_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getResourceData = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getResourceData_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getResourceData failed: unknown result");
}
NoteStoreClient.prototype.getResourceByHash = function(authenticationToken,noteGuid,contentHash,withData,withRecognition,withAlternateData,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData)
}

NoteStoreClient.prototype.send_getResourceByHash = function(authenticationToken,noteGuid,contentHash,withData,withRecognition,withAlternateData){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getResourceByHash', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getResourceByHash_args()
  args.authenticationToken = authenticationToken
  args.noteGuid = noteGuid
  args.contentHash = contentHash
  args.withData = withData
  args.withRecognition = withRecognition
  args.withAlternateData = withAlternateData
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getResourceByHash = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getResourceByHash_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getResourceByHash failed: unknown result");
}
NoteStoreClient.prototype.getResourceRecognition = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getResourceRecognition(authenticationToken, guid)
}

NoteStoreClient.prototype.send_getResourceRecognition = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getResourceRecognition', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getResourceRecognition_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getResourceRecognition = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getResourceRecognition_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getResourceRecognition failed: unknown result");
}
NoteStoreClient.prototype.getResourceAlternateData = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getResourceAlternateData(authenticationToken, guid)
}

NoteStoreClient.prototype.send_getResourceAlternateData = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getResourceAlternateData', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getResourceAlternateData_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getResourceAlternateData = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getResourceAlternateData_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getResourceAlternateData failed: unknown result");
}
NoteStoreClient.prototype.getResourceAttributes = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getResourceAttributes(authenticationToken, guid)
}

NoteStoreClient.prototype.send_getResourceAttributes = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getResourceAttributes', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getResourceAttributes_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getResourceAttributes = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getResourceAttributes_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getResourceAttributes failed: unknown result");
}
NoteStoreClient.prototype.getAccountSize = function(authenticationToken,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getAccountSize(authenticationToken)
}

NoteStoreClient.prototype.send_getAccountSize = function(authenticationToken){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAccountSize', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getAccountSize_args()
  args.authenticationToken = authenticationToken
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getAccountSize = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getAccountSize_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getAccountSize failed: unknown result");
}
NoteStoreClient.prototype.getAds = function(authenticationToken,adParameters,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getAds(authenticationToken, adParameters)
}

NoteStoreClient.prototype.send_getAds = function(authenticationToken,adParameters){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAds', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getAds_args()
  args.authenticationToken = authenticationToken
  args.adParameters = adParameters
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getAds = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getAds_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getAds failed: unknown result");
}
NoteStoreClient.prototype.getRandomAd = function(authenticationToken,adParameters,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getRandomAd(authenticationToken, adParameters)
}

NoteStoreClient.prototype.send_getRandomAd = function(authenticationToken,adParameters){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRandomAd', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getRandomAd_args()
  args.authenticationToken = authenticationToken
  args.adParameters = adParameters
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getRandomAd = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getRandomAd_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getRandomAd failed: unknown result");
}
NoteStoreClient.prototype.getPublicNotebook = function(userId,publicUri,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getPublicNotebook(userId, publicUri)
}

NoteStoreClient.prototype.send_getPublicNotebook = function(userId,publicUri){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPublicNotebook', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getPublicNotebook_args()
  args.userId = userId
  args.publicUri = publicUri
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getPublicNotebook = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getPublicNotebook_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getPublicNotebook failed: unknown result");
}
NoteStoreClient.prototype.createSharedNotebook = function(authenticationToken,sharedNotebook,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_createSharedNotebook(authenticationToken, sharedNotebook)
}

NoteStoreClient.prototype.send_createSharedNotebook = function(authenticationToken,sharedNotebook){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createSharedNotebook', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_createSharedNotebook_args()
  args.authenticationToken = authenticationToken
  args.sharedNotebook = sharedNotebook
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_createSharedNotebook = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_createSharedNotebook_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("createSharedNotebook failed: unknown result");
}
NoteStoreClient.prototype.listSharedNotebooks = function(authenticationToken,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_listSharedNotebooks(authenticationToken)
}

NoteStoreClient.prototype.send_listSharedNotebooks = function(authenticationToken){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listSharedNotebooks', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_listSharedNotebooks_args()
  args.authenticationToken = authenticationToken
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_listSharedNotebooks = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_listSharedNotebooks_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("listSharedNotebooks failed: unknown result");
}
NoteStoreClient.prototype.expungeSharedNotebooks = function(authenticationToken,sharedNotebookIds,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_expungeSharedNotebooks(authenticationToken, sharedNotebookIds)
}

NoteStoreClient.prototype.send_expungeSharedNotebooks = function(authenticationToken,sharedNotebookIds){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('expungeSharedNotebooks', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_expungeSharedNotebooks_args()
  args.authenticationToken = authenticationToken
  args.sharedNotebookIds = sharedNotebookIds
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_expungeSharedNotebooks = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_expungeSharedNotebooks_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("expungeSharedNotebooks failed: unknown result");
}
NoteStoreClient.prototype.createLinkedNotebook = function(authenticationToken,linkedNotebook,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_createLinkedNotebook(authenticationToken, linkedNotebook)
}

NoteStoreClient.prototype.send_createLinkedNotebook = function(authenticationToken,linkedNotebook){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createLinkedNotebook', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_createLinkedNotebook_args()
  args.authenticationToken = authenticationToken
  args.linkedNotebook = linkedNotebook
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_createLinkedNotebook = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_createLinkedNotebook_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("createLinkedNotebook failed: unknown result");
}
NoteStoreClient.prototype.updateLinkedNotebook = function(authenticationToken,linkedNotebook,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_updateLinkedNotebook(authenticationToken, linkedNotebook)
}

NoteStoreClient.prototype.send_updateLinkedNotebook = function(authenticationToken,linkedNotebook){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateLinkedNotebook', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_updateLinkedNotebook_args()
  args.authenticationToken = authenticationToken
  args.linkedNotebook = linkedNotebook
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_updateLinkedNotebook = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_updateLinkedNotebook_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("updateLinkedNotebook failed: unknown result");
}
NoteStoreClient.prototype.listLinkedNotebooks = function(authenticationToken,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_listLinkedNotebooks(authenticationToken)
}

NoteStoreClient.prototype.send_listLinkedNotebooks = function(authenticationToken){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listLinkedNotebooks', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_listLinkedNotebooks_args()
  args.authenticationToken = authenticationToken
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_listLinkedNotebooks = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_listLinkedNotebooks_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("listLinkedNotebooks failed: unknown result");
}
NoteStoreClient.prototype.expungeLinkedNotebook = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_expungeLinkedNotebook(authenticationToken, guid)
}

NoteStoreClient.prototype.send_expungeLinkedNotebook = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('expungeLinkedNotebook', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_expungeLinkedNotebook_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_expungeLinkedNotebook = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_expungeLinkedNotebook_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("expungeLinkedNotebook failed: unknown result");
}
NoteStoreClient.prototype.authenticateToSharedNotebook = function(shareKey,authenticationToken,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_authenticateToSharedNotebook(shareKey, authenticationToken)
}

NoteStoreClient.prototype.send_authenticateToSharedNotebook = function(shareKey,authenticationToken){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('authenticateToSharedNotebook', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_authenticateToSharedNotebook_args()
  args.shareKey = shareKey
  args.authenticationToken = authenticationToken
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_authenticateToSharedNotebook = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_authenticateToSharedNotebook_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("authenticateToSharedNotebook failed: unknown result");
}
NoteStoreClient.prototype.getSharedNotebookByAuth = function(authenticationToken,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getSharedNotebookByAuth(authenticationToken)
}

NoteStoreClient.prototype.send_getSharedNotebookByAuth = function(authenticationToken){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSharedNotebookByAuth', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_getSharedNotebookByAuth_args()
  args.authenticationToken = authenticationToken
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_getSharedNotebookByAuth = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_getSharedNotebookByAuth_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getSharedNotebookByAuth failed: unknown result");
}
NoteStoreClient.prototype.emailNote = function(authenticationToken,parameters,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_emailNote(authenticationToken, parameters)
}

NoteStoreClient.prototype.send_emailNote = function(authenticationToken,parameters){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('emailNote', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_emailNote_args()
  args.authenticationToken = authenticationToken
  args.parameters = parameters
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_emailNote = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_emailNote_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  callback(null)
}
NoteStoreClient.prototype.shareNote = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_shareNote(authenticationToken, guid)
}

NoteStoreClient.prototype.send_shareNote = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('shareNote', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_shareNote_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_shareNote = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_shareNote_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("shareNote failed: unknown result");
}
NoteStoreClient.prototype.stopSharingNote = function(authenticationToken,guid,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_stopSharingNote(authenticationToken, guid)
}

NoteStoreClient.prototype.send_stopSharingNote = function(authenticationToken,guid){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('stopSharingNote', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_stopSharingNote_args()
  args.authenticationToken = authenticationToken
  args.guid = guid
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_stopSharingNote = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_stopSharingNote_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  callback(null)
}
NoteStoreClient.prototype.authenticateToSharedNote = function(guid,noteKey,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_authenticateToSharedNote(guid, noteKey)
}

NoteStoreClient.prototype.send_authenticateToSharedNote = function(guid,noteKey){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('authenticateToSharedNote', Thrift.MessageType.CALL, this.seqid)
  var args = new NoteStore_authenticateToSharedNote_args()
  args.guid = guid
  args.noteKey = noteKey
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

NoteStoreClient.prototype.recv_authenticateToSharedNote = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new NoteStore_authenticateToSharedNote_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("authenticateToSharedNote failed: unknown result");
}
var NoteStoreProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
NoteStoreProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin()
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output)
  } else {
    input.skip(Thrift.Type.STRUCT)
    input.readMessageEnd()
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname)
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid)
    x.write(output)
    output.writeMessageEnd()
    output.flush()
  }
}

NoteStoreProcessor.prototype.process_getSyncState = function(seqid, input, output) {
  var args = new NoteStore_getSyncState_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getSyncState_result()
  this._handler.getSyncState(args.authenticationToken, function(success) {
    result.success = success
    output.writeMessageBegin("getSyncState", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getSyncChunk = function(seqid, input, output) {
  var args = new NoteStore_getSyncChunk_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getSyncChunk_result()
  this._handler.getSyncChunk(args.authenticationToken, args.afterUSN, args.maxEntries, args.fullSyncOnly, function(success) {
    result.success = success
    output.writeMessageBegin("getSyncChunk", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getLinkedNotebookSyncState = function(seqid, input, output) {
  var args = new NoteStore_getLinkedNotebookSyncState_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getLinkedNotebookSyncState_result()
  this._handler.getLinkedNotebookSyncState(args.authenticationToken, args.linkedNotebook, function(success) {
    result.success = success
    output.writeMessageBegin("getLinkedNotebookSyncState", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getLinkedNotebookSyncChunk = function(seqid, input, output) {
  var args = new NoteStore_getLinkedNotebookSyncChunk_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getLinkedNotebookSyncChunk_result()
  this._handler.getLinkedNotebookSyncChunk(args.authenticationToken, args.linkedNotebook, args.afterUSN, args.maxEntries, args.fullSyncOnly, function(success) {
    result.success = success
    output.writeMessageBegin("getLinkedNotebookSyncChunk", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_listNotebooks = function(seqid, input, output) {
  var args = new NoteStore_listNotebooks_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_listNotebooks_result()
  this._handler.listNotebooks(args.authenticationToken, function(success) {
    result.success = success
    output.writeMessageBegin("listNotebooks", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getNotebook = function(seqid, input, output) {
  var args = new NoteStore_getNotebook_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getNotebook_result()
  this._handler.getNotebook(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("getNotebook", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getDefaultNotebook = function(seqid, input, output) {
  var args = new NoteStore_getDefaultNotebook_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getDefaultNotebook_result()
  this._handler.getDefaultNotebook(args.authenticationToken, function(success) {
    result.success = success
    output.writeMessageBegin("getDefaultNotebook", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_createNotebook = function(seqid, input, output) {
  var args = new NoteStore_createNotebook_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_createNotebook_result()
  this._handler.createNotebook(args.authenticationToken, args.notebook, function(success) {
    result.success = success
    output.writeMessageBegin("createNotebook", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_updateNotebook = function(seqid, input, output) {
  var args = new NoteStore_updateNotebook_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_updateNotebook_result()
  this._handler.updateNotebook(args.authenticationToken, args.notebook, function(success) {
    result.success = success
    output.writeMessageBegin("updateNotebook", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_expungeNotebook = function(seqid, input, output) {
  var args = new NoteStore_expungeNotebook_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_expungeNotebook_result()
  this._handler.expungeNotebook(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("expungeNotebook", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_listTags = function(seqid, input, output) {
  var args = new NoteStore_listTags_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_listTags_result()
  this._handler.listTags(args.authenticationToken, function(success) {
    result.success = success
    output.writeMessageBegin("listTags", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_listTagsByNotebook = function(seqid, input, output) {
  var args = new NoteStore_listTagsByNotebook_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_listTagsByNotebook_result()
  this._handler.listTagsByNotebook(args.authenticationToken, args.notebookGuid, function(success) {
    result.success = success
    output.writeMessageBegin("listTagsByNotebook", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getTag = function(seqid, input, output) {
  var args = new NoteStore_getTag_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getTag_result()
  this._handler.getTag(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("getTag", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_createTag = function(seqid, input, output) {
  var args = new NoteStore_createTag_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_createTag_result()
  this._handler.createTag(args.authenticationToken, args.tag, function(success) {
    result.success = success
    output.writeMessageBegin("createTag", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_updateTag = function(seqid, input, output) {
  var args = new NoteStore_updateTag_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_updateTag_result()
  this._handler.updateTag(args.authenticationToken, args.tag, function(success) {
    result.success = success
    output.writeMessageBegin("updateTag", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_untagAll = function(seqid, input, output) {
  var args = new NoteStore_untagAll_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_untagAll_result()
  this._handler.untagAll(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("untagAll", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_expungeTag = function(seqid, input, output) {
  var args = new NoteStore_expungeTag_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_expungeTag_result()
  this._handler.expungeTag(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("expungeTag", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_listSearches = function(seqid, input, output) {
  var args = new NoteStore_listSearches_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_listSearches_result()
  this._handler.listSearches(args.authenticationToken, function(success) {
    result.success = success
    output.writeMessageBegin("listSearches", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getSearch = function(seqid, input, output) {
  var args = new NoteStore_getSearch_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getSearch_result()
  this._handler.getSearch(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("getSearch", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_createSearch = function(seqid, input, output) {
  var args = new NoteStore_createSearch_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_createSearch_result()
  this._handler.createSearch(args.authenticationToken, args.search, function(success) {
    result.success = success
    output.writeMessageBegin("createSearch", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_updateSearch = function(seqid, input, output) {
  var args = new NoteStore_updateSearch_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_updateSearch_result()
  this._handler.updateSearch(args.authenticationToken, args.search, function(success) {
    result.success = success
    output.writeMessageBegin("updateSearch", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_expungeSearch = function(seqid, input, output) {
  var args = new NoteStore_expungeSearch_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_expungeSearch_result()
  this._handler.expungeSearch(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("expungeSearch", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_findNotes = function(seqid, input, output) {
  var args = new NoteStore_findNotes_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_findNotes_result()
  this._handler.findNotes(args.authenticationToken, args.filter, args.offset, args.maxNotes, function(success) {
    result.success = success
    output.writeMessageBegin("findNotes", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_findNoteOffset = function(seqid, input, output) {
  var args = new NoteStore_findNoteOffset_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_findNoteOffset_result()
  this._handler.findNoteOffset(args.authenticationToken, args.filter, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("findNoteOffset", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_findNotesMetadata = function(seqid, input, output) {
  var args = new NoteStore_findNotesMetadata_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_findNotesMetadata_result()
  this._handler.findNotesMetadata(args.authenticationToken, args.filter, args.offset, args.maxNotes, args.resultSpec, function(success) {
    result.success = success
    output.writeMessageBegin("findNotesMetadata", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_findNoteCounts = function(seqid, input, output) {
  var args = new NoteStore_findNoteCounts_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_findNoteCounts_result()
  this._handler.findNoteCounts(args.authenticationToken, args.filter, args.withTrash, function(success) {
    result.success = success
    output.writeMessageBegin("findNoteCounts", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getNote = function(seqid, input, output) {
  var args = new NoteStore_getNote_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getNote_result()
  this._handler.getNote(args.authenticationToken, args.guid, args.withContent, args.withResourcesData, args.withResourcesRecognition, args.withResourcesAlternateData, function(success) {
    result.success = success
    output.writeMessageBegin("getNote", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getNoteContent = function(seqid, input, output) {
  var args = new NoteStore_getNoteContent_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getNoteContent_result()
  this._handler.getNoteContent(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("getNoteContent", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getNoteSearchText = function(seqid, input, output) {
  var args = new NoteStore_getNoteSearchText_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getNoteSearchText_result()
  this._handler.getNoteSearchText(args.authenticationToken, args.guid, args.noteOnly, args.tokenizeForIndexing, function(success) {
    result.success = success
    output.writeMessageBegin("getNoteSearchText", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getResourceSearchText = function(seqid, input, output) {
  var args = new NoteStore_getResourceSearchText_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getResourceSearchText_result()
  this._handler.getResourceSearchText(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("getResourceSearchText", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getNoteTagNames = function(seqid, input, output) {
  var args = new NoteStore_getNoteTagNames_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getNoteTagNames_result()
  this._handler.getNoteTagNames(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("getNoteTagNames", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_createNote = function(seqid, input, output) {
  var args = new NoteStore_createNote_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_createNote_result()
  this._handler.createNote(args.authenticationToken, args.note, function(success) {
    result.success = success
    output.writeMessageBegin("createNote", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_updateNote = function(seqid, input, output) {
  var args = new NoteStore_updateNote_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_updateNote_result()
  this._handler.updateNote(args.authenticationToken, args.note, function(success) {
    result.success = success
    output.writeMessageBegin("updateNote", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_deleteNote = function(seqid, input, output) {
  var args = new NoteStore_deleteNote_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_deleteNote_result()
  this._handler.deleteNote(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("deleteNote", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_expungeNote = function(seqid, input, output) {
  var args = new NoteStore_expungeNote_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_expungeNote_result()
  this._handler.expungeNote(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("expungeNote", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_expungeNotes = function(seqid, input, output) {
  var args = new NoteStore_expungeNotes_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_expungeNotes_result()
  this._handler.expungeNotes(args.authenticationToken, args.noteGuids, function(success) {
    result.success = success
    output.writeMessageBegin("expungeNotes", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_expungeInactiveNotes = function(seqid, input, output) {
  var args = new NoteStore_expungeInactiveNotes_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_expungeInactiveNotes_result()
  this._handler.expungeInactiveNotes(args.authenticationToken, function(success) {
    result.success = success
    output.writeMessageBegin("expungeInactiveNotes", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_copyNote = function(seqid, input, output) {
  var args = new NoteStore_copyNote_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_copyNote_result()
  this._handler.copyNote(args.authenticationToken, args.noteGuid, args.toNotebookGuid, function(success) {
    result.success = success
    output.writeMessageBegin("copyNote", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_listNoteVersions = function(seqid, input, output) {
  var args = new NoteStore_listNoteVersions_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_listNoteVersions_result()
  this._handler.listNoteVersions(args.authenticationToken, args.noteGuid, function(success) {
    result.success = success
    output.writeMessageBegin("listNoteVersions", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getNoteVersion = function(seqid, input, output) {
  var args = new NoteStore_getNoteVersion_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getNoteVersion_result()
  this._handler.getNoteVersion(args.authenticationToken, args.noteGuid, args.updateSequenceNum, args.withResourcesData, args.withResourcesRecognition, args.withResourcesAlternateData, function(success) {
    result.success = success
    output.writeMessageBegin("getNoteVersion", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getResource = function(seqid, input, output) {
  var args = new NoteStore_getResource_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getResource_result()
  this._handler.getResource(args.authenticationToken, args.guid, args.withData, args.withRecognition, args.withAttributes, args.withAlternateData, function(success) {
    result.success = success
    output.writeMessageBegin("getResource", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_updateResource = function(seqid, input, output) {
  var args = new NoteStore_updateResource_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_updateResource_result()
  this._handler.updateResource(args.authenticationToken, args.resource, function(success) {
    result.success = success
    output.writeMessageBegin("updateResource", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getResourceData = function(seqid, input, output) {
  var args = new NoteStore_getResourceData_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getResourceData_result()
  this._handler.getResourceData(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("getResourceData", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getResourceByHash = function(seqid, input, output) {
  var args = new NoteStore_getResourceByHash_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getResourceByHash_result()
  this._handler.getResourceByHash(args.authenticationToken, args.noteGuid, args.contentHash, args.withData, args.withRecognition, args.withAlternateData, function(success) {
    result.success = success
    output.writeMessageBegin("getResourceByHash", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getResourceRecognition = function(seqid, input, output) {
  var args = new NoteStore_getResourceRecognition_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getResourceRecognition_result()
  this._handler.getResourceRecognition(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("getResourceRecognition", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getResourceAlternateData = function(seqid, input, output) {
  var args = new NoteStore_getResourceAlternateData_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getResourceAlternateData_result()
  this._handler.getResourceAlternateData(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("getResourceAlternateData", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getResourceAttributes = function(seqid, input, output) {
  var args = new NoteStore_getResourceAttributes_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getResourceAttributes_result()
  this._handler.getResourceAttributes(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("getResourceAttributes", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getAccountSize = function(seqid, input, output) {
  var args = new NoteStore_getAccountSize_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getAccountSize_result()
  this._handler.getAccountSize(args.authenticationToken, function(success) {
    result.success = success
    output.writeMessageBegin("getAccountSize", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getAds = function(seqid, input, output) {
  var args = new NoteStore_getAds_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getAds_result()
  this._handler.getAds(args.authenticationToken, args.adParameters, function(success) {
    result.success = success
    output.writeMessageBegin("getAds", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getRandomAd = function(seqid, input, output) {
  var args = new NoteStore_getRandomAd_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getRandomAd_result()
  this._handler.getRandomAd(args.authenticationToken, args.adParameters, function(success) {
    result.success = success
    output.writeMessageBegin("getRandomAd", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getPublicNotebook = function(seqid, input, output) {
  var args = new NoteStore_getPublicNotebook_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getPublicNotebook_result()
  this._handler.getPublicNotebook(args.userId, args.publicUri, function(success) {
    result.success = success
    output.writeMessageBegin("getPublicNotebook", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_createSharedNotebook = function(seqid, input, output) {
  var args = new NoteStore_createSharedNotebook_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_createSharedNotebook_result()
  this._handler.createSharedNotebook(args.authenticationToken, args.sharedNotebook, function(success) {
    result.success = success
    output.writeMessageBegin("createSharedNotebook", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_listSharedNotebooks = function(seqid, input, output) {
  var args = new NoteStore_listSharedNotebooks_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_listSharedNotebooks_result()
  this._handler.listSharedNotebooks(args.authenticationToken, function(success) {
    result.success = success
    output.writeMessageBegin("listSharedNotebooks", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_expungeSharedNotebooks = function(seqid, input, output) {
  var args = new NoteStore_expungeSharedNotebooks_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_expungeSharedNotebooks_result()
  this._handler.expungeSharedNotebooks(args.authenticationToken, args.sharedNotebookIds, function(success) {
    result.success = success
    output.writeMessageBegin("expungeSharedNotebooks", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_createLinkedNotebook = function(seqid, input, output) {
  var args = new NoteStore_createLinkedNotebook_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_createLinkedNotebook_result()
  this._handler.createLinkedNotebook(args.authenticationToken, args.linkedNotebook, function(success) {
    result.success = success
    output.writeMessageBegin("createLinkedNotebook", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_updateLinkedNotebook = function(seqid, input, output) {
  var args = new NoteStore_updateLinkedNotebook_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_updateLinkedNotebook_result()
  this._handler.updateLinkedNotebook(args.authenticationToken, args.linkedNotebook, function(success) {
    result.success = success
    output.writeMessageBegin("updateLinkedNotebook", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_listLinkedNotebooks = function(seqid, input, output) {
  var args = new NoteStore_listLinkedNotebooks_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_listLinkedNotebooks_result()
  this._handler.listLinkedNotebooks(args.authenticationToken, function(success) {
    result.success = success
    output.writeMessageBegin("listLinkedNotebooks", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_expungeLinkedNotebook = function(seqid, input, output) {
  var args = new NoteStore_expungeLinkedNotebook_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_expungeLinkedNotebook_result()
  this._handler.expungeLinkedNotebook(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("expungeLinkedNotebook", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_authenticateToSharedNotebook = function(seqid, input, output) {
  var args = new NoteStore_authenticateToSharedNotebook_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_authenticateToSharedNotebook_result()
  this._handler.authenticateToSharedNotebook(args.shareKey, args.authenticationToken, function(success) {
    result.success = success
    output.writeMessageBegin("authenticateToSharedNotebook", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_getSharedNotebookByAuth = function(seqid, input, output) {
  var args = new NoteStore_getSharedNotebookByAuth_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_getSharedNotebookByAuth_result()
  this._handler.getSharedNotebookByAuth(args.authenticationToken, function(success) {
    result.success = success
    output.writeMessageBegin("getSharedNotebookByAuth", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_emailNote = function(seqid, input, output) {
  var args = new NoteStore_emailNote_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_emailNote_result()
  this._handler.emailNote(args.authenticationToken, args.parameters, function(success) {
    result.success = success
    output.writeMessageBegin("emailNote", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_shareNote = function(seqid, input, output) {
  var args = new NoteStore_shareNote_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_shareNote_result()
  this._handler.shareNote(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("shareNote", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_stopSharingNote = function(seqid, input, output) {
  var args = new NoteStore_stopSharingNote_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_stopSharingNote_result()
  this._handler.stopSharingNote(args.authenticationToken, args.guid, function(success) {
    result.success = success
    output.writeMessageBegin("stopSharingNote", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

NoteStoreProcessor.prototype.process_authenticateToSharedNote = function(seqid, input, output) {
  var args = new NoteStore_authenticateToSharedNote_args()
  args.read(input)
  input.readMessageEnd()
  var result = new NoteStore_authenticateToSharedNote_result()
  this._handler.authenticateToSharedNote(args.guid, args.noteKey, function(success) {
    result.success = success
    output.writeMessageBegin("authenticateToSharedNote", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

