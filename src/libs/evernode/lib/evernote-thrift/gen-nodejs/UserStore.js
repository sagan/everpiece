//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var Types_ttypes = require('./Types_types')
var Errors_ttypes = require('./Errors_types')


var ttypes = require('./UserStore_types');
//HELPER FUNCTIONS AND STRUCTURES

var UserStore_checkVersion_args = function(args){
  this.clientName = null
  this.edamVersionMajor = 1
  this.edamVersionMinor = 19
if( args != null ){  if (null != args.clientName)
  this.clientName = args.clientName
  if (null != args.edamVersionMajor)
  this.edamVersionMajor = args.edamVersionMajor
  if (null != args.edamVersionMinor)
  this.edamVersionMinor = args.edamVersionMinor
}}
UserStore_checkVersion_args.prototype = {}
UserStore_checkVersion_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.clientName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I16) {
        this.edamVersionMajor = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I16) {
        this.edamVersionMinor = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserStore_checkVersion_args.prototype.write = function(output){ 
  output.writeStructBegin('UserStore_checkVersion_args')
  if (null != this.clientName) {
    output.writeFieldBegin('clientName', Thrift.Type.STRING, 1)
    output.writeString(this.clientName)
    output.writeFieldEnd()
  }
  if (null != this.edamVersionMajor) {
    output.writeFieldBegin('edamVersionMajor', Thrift.Type.I16, 2)
    output.writeI16(this.edamVersionMajor)
    output.writeFieldEnd()
  }
  if (null != this.edamVersionMinor) {
    output.writeFieldBegin('edamVersionMinor', Thrift.Type.I16, 3)
    output.writeI16(this.edamVersionMinor)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UserStore_checkVersion_result = function(args){
  this.success = null
if( args != null ){  if (null != args.success)
  this.success = args.success
}}
UserStore_checkVersion_result.prototype = {}
UserStore_checkVersion_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserStore_checkVersion_result.prototype.write = function(output){ 
  output.writeStructBegin('UserStore_checkVersion_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UserStore_authenticate_args = function(args){
  this.username = null
  this.password = null
  this.consumerKey = null
  this.consumerSecret = null
if( args != null ){  if (null != args.username)
  this.username = args.username
  if (null != args.password)
  this.password = args.password
  if (null != args.consumerKey)
  this.consumerKey = args.consumerKey
  if (null != args.consumerSecret)
  this.consumerSecret = args.consumerSecret
}}
UserStore_authenticate_args.prototype = {}
UserStore_authenticate_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.consumerKey = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.consumerSecret = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserStore_authenticate_args.prototype.write = function(output){ 
  output.writeStructBegin('UserStore_authenticate_args')
  if (null != this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1)
    output.writeString(this.username)
    output.writeFieldEnd()
  }
  if (null != this.password) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2)
    output.writeString(this.password)
    output.writeFieldEnd()
  }
  if (null != this.consumerKey) {
    output.writeFieldBegin('consumerKey', Thrift.Type.STRING, 3)
    output.writeString(this.consumerKey)
    output.writeFieldEnd()
  }
  if (null != this.consumerSecret) {
    output.writeFieldBegin('consumerSecret', Thrift.Type.STRING, 4)
    output.writeString(this.consumerSecret)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UserStore_authenticate_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
UserStore_authenticate_result.prototype = {}
UserStore_authenticate_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AuthenticationResult()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserStore_authenticate_result.prototype.write = function(output){ 
  output.writeStructBegin('UserStore_authenticate_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UserStore_refreshAuthentication_args = function(args){
  this.authenticationToken = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
}}
UserStore_refreshAuthentication_args.prototype = {}
UserStore_refreshAuthentication_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserStore_refreshAuthentication_args.prototype.write = function(output){ 
  output.writeStructBegin('UserStore_refreshAuthentication_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UserStore_refreshAuthentication_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
UserStore_refreshAuthentication_result.prototype = {}
UserStore_refreshAuthentication_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AuthenticationResult()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserStore_refreshAuthentication_result.prototype.write = function(output){ 
  output.writeStructBegin('UserStore_refreshAuthentication_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UserStore_getUser_args = function(args){
  this.authenticationToken = null
if( args != null ){  if (null != args.authenticationToken)
  this.authenticationToken = args.authenticationToken
}}
UserStore_getUser_args.prototype = {}
UserStore_getUser_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserStore_getUser_args.prototype.write = function(output){ 
  output.writeStructBegin('UserStore_getUser_args')
  if (null != this.authenticationToken) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1)
    output.writeString(this.authenticationToken)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UserStore_getUser_result = function(args){
  this.success = null
  this.userException = null
  this.systemException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.userException)
  this.userException = args.userException
  if (null != args.systemException)
  this.systemException = args.systemException
}}
UserStore_getUser_result.prototype = {}
UserStore_getUser_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.User()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserStore_getUser_result.prototype.write = function(output){ 
  output.writeStructBegin('UserStore_getUser_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UserStore_getPublicUserInfo_args = function(args){
  this.username = null
if( args != null ){  if (null != args.username)
  this.username = args.username
}}
UserStore_getPublicUserInfo_args.prototype = {}
UserStore_getPublicUserInfo_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserStore_getPublicUserInfo_args.prototype.write = function(output){ 
  output.writeStructBegin('UserStore_getPublicUserInfo_args')
  if (null != this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1)
    output.writeString(this.username)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UserStore_getPublicUserInfo_result = function(args){
  this.success = null
  this.notFoundException = null
  this.systemException = null
  this.userException = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.notFoundException)
  this.notFoundException = args.notFoundException
  if (null != args.systemException)
  this.systemException = args.systemException
  if (null != args.userException)
  this.userException = args.userException
}}
UserStore_getPublicUserInfo_result.prototype = {}
UserStore_getPublicUserInfo_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PublicUserInfo()
        this.success.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.EDAMNotFoundException()
        this.notFoundException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.EDAMSystemException()
        this.systemException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.EDAMUserException()
        this.userException.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserStore_getPublicUserInfo_result.prototype.write = function(output){ 
  output.writeStructBegin('UserStore_getPublicUserInfo_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  if (null != this.notFoundException) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 1)
    this.notFoundException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.systemException) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2)
    this.systemException.write(output)
    output.writeFieldEnd()
  }
  if (null != this.userException) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 3)
    this.userException.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UserStoreClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {}
}
UserStoreClient.prototype = {}
UserStoreClient.prototype.checkVersion = function(clientName,edamVersionMajor,edamVersionMinor,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_checkVersion(clientName, edamVersionMajor, edamVersionMinor)
}

UserStoreClient.prototype.send_checkVersion = function(clientName,edamVersionMajor,edamVersionMinor){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkVersion', Thrift.MessageType.CALL, this.seqid)
  var args = new UserStore_checkVersion_args()
  args.clientName = clientName
  args.edamVersionMajor = edamVersionMajor
  args.edamVersionMinor = edamVersionMinor
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

UserStoreClient.prototype.recv_checkVersion = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new UserStore_checkVersion_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("checkVersion failed: unknown result");
}
UserStoreClient.prototype.authenticate = function(username,password,consumerKey,consumerSecret,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_authenticate(username, password, consumerKey, consumerSecret)
}

UserStoreClient.prototype.send_authenticate = function(username,password,consumerKey,consumerSecret){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('authenticate', Thrift.MessageType.CALL, this.seqid)
  var args = new UserStore_authenticate_args()
  args.username = username
  args.password = password
  args.consumerKey = consumerKey
  args.consumerSecret = consumerSecret
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

UserStoreClient.prototype.recv_authenticate = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new UserStore_authenticate_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("authenticate failed: unknown result");
}
UserStoreClient.prototype.refreshAuthentication = function(authenticationToken,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_refreshAuthentication(authenticationToken)
}

UserStoreClient.prototype.send_refreshAuthentication = function(authenticationToken){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('refreshAuthentication', Thrift.MessageType.CALL, this.seqid)
  var args = new UserStore_refreshAuthentication_args()
  args.authenticationToken = authenticationToken
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

UserStoreClient.prototype.recv_refreshAuthentication = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new UserStore_refreshAuthentication_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("refreshAuthentication failed: unknown result");
}
UserStoreClient.prototype.getUser = function(authenticationToken,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getUser(authenticationToken)
}

UserStoreClient.prototype.send_getUser = function(authenticationToken){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUser', Thrift.MessageType.CALL, this.seqid)
  var args = new UserStore_getUser_args()
  args.authenticationToken = authenticationToken
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

UserStoreClient.prototype.recv_getUser = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new UserStore_getUser_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getUser failed: unknown result");
}
UserStoreClient.prototype.getPublicUserInfo = function(username,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getPublicUserInfo(username)
}

UserStoreClient.prototype.send_getPublicUserInfo = function(username){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPublicUserInfo', Thrift.MessageType.CALL, this.seqid)
  var args = new UserStore_getPublicUserInfo_args()
  args.username = username
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

UserStoreClient.prototype.recv_getPublicUserInfo = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new UserStore_getPublicUserInfo_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null != result.systemException) {
    return callback(result.systemException);
  }
  if (null != result.userException) {
    return callback(result.userException);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getPublicUserInfo failed: unknown result");
}
var UserStoreProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
UserStoreProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin()
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output)
  } else {
    input.skip(Thrift.Type.STRUCT)
    input.readMessageEnd()
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname)
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid)
    x.write(output)
    output.writeMessageEnd()
    output.flush()
  }
}

UserStoreProcessor.prototype.process_checkVersion = function(seqid, input, output) {
  var args = new UserStore_checkVersion_args()
  args.read(input)
  input.readMessageEnd()
  var result = new UserStore_checkVersion_result()
  this._handler.checkVersion(args.clientName, args.edamVersionMajor, args.edamVersionMinor, function(success) {
    result.success = success
    output.writeMessageBegin("checkVersion", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

UserStoreProcessor.prototype.process_authenticate = function(seqid, input, output) {
  var args = new UserStore_authenticate_args()
  args.read(input)
  input.readMessageEnd()
  var result = new UserStore_authenticate_result()
  this._handler.authenticate(args.username, args.password, args.consumerKey, args.consumerSecret, function(success) {
    result.success = success
    output.writeMessageBegin("authenticate", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

UserStoreProcessor.prototype.process_refreshAuthentication = function(seqid, input, output) {
  var args = new UserStore_refreshAuthentication_args()
  args.read(input)
  input.readMessageEnd()
  var result = new UserStore_refreshAuthentication_result()
  this._handler.refreshAuthentication(args.authenticationToken, function(success) {
    result.success = success
    output.writeMessageBegin("refreshAuthentication", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

UserStoreProcessor.prototype.process_getUser = function(seqid, input, output) {
  var args = new UserStore_getUser_args()
  args.read(input)
  input.readMessageEnd()
  var result = new UserStore_getUser_result()
  this._handler.getUser(args.authenticationToken, function(success) {
    result.success = success
    output.writeMessageBegin("getUser", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

UserStoreProcessor.prototype.process_getPublicUserInfo = function(seqid, input, output) {
  var args = new UserStore_getPublicUserInfo_args()
  args.read(input)
  input.readMessageEnd()
  var result = new UserStore_getPublicUserInfo_result()
  this._handler.getPublicUserInfo(args.username, function(success) {
    result.success = success
    output.writeMessageBegin("getPublicUserInfo", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

