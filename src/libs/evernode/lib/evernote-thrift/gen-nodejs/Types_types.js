//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.PrivilegeLevel = { 
'NORMAL' : 1
,'PREMIUM' : 3
,'MANAGER' : 7
,'SUPPORT' : 8
,'ADMIN' : 9
}
ttypes.QueryFormat = { 
'USER' : 1
,'SEXP' : 2
}
ttypes.NoteSortOrder = { 
'CREATED' : 1
,'UPDATED' : 2
,'RELEVANCE' : 3
,'UPDATE_SEQUENCE_NUMBER' : 4
,'TITLE' : 5
}
ttypes.PremiumOrderStatus = { 
'NONE' : 0
,'PENDING' : 1
,'ACTIVE' : 2
,'FAILED' : 3
,'CANCELLATION_PENDING' : 4
,'CANCELED' : 5
}
ttypes.EDAM_NOTE_SOURCE_WEB_CLIP = 'web.clip'
ttypes.EDAM_NOTE_SOURCE_MAIL_CLIP = 'mail.clip'
ttypes.EDAM_NOTE_SOURCE_MAIL_SMTP_GATEWAY = 'mail.smtp'
var Data = module.exports.Data = function(args){
  this.bodyHash = null
  this.size = null
  this.body = null
if( args != null ){  if (null != args.bodyHash)
  this.bodyHash = args.bodyHash
  if (null != args.size)
  this.size = args.size
  if (null != args.body)
  this.body = args.body
}}
Data.prototype = {}
Data.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.bodyHash = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Data.prototype.write = function(output){ 
  output.writeStructBegin('Data')
  if (null != this.bodyHash) {
    output.writeFieldBegin('bodyHash', Thrift.Type.STRING, 1)
    output.writeString(this.bodyHash)
    output.writeFieldEnd()
  }
  if (null != this.size) {
    output.writeFieldBegin('size', Thrift.Type.I32, 2)
    output.writeI32(this.size)
    output.writeFieldEnd()
  }
  if (null != this.body) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 3)
    output.writeString(this.body)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var UserAttributes = module.exports.UserAttributes = function(args){
  this.defaultLocationName = null
  this.defaultLatitude = null
  this.defaultLongitude = null
  this.preactivation = null
  this.viewedPromotions = null
  this.incomingEmailAddress = null
  this.recentMailedAddresses = null
  this.comments = null
  this.dateAgreedToTermsOfService = null
  this.maxReferrals = null
  this.referralCount = null
  this.refererCode = null
  this.sentEmailDate = null
  this.sentEmailCount = null
  this.dailyEmailLimit = null
  this.emailOptOutDate = null
  this.partnerEmailOptInDate = null
  this.preferredLanguage = null
  this.preferredCountry = null
  this.clipFullPage = null
  this.twitterUserName = null
  this.twitterId = null
  this.groupName = null
  this.recognitionLanguage = null
  this.customerProfileId = null
  this.referralProof = null
  this.educationalDiscount = null
  this.businessAddress = null
if( args != null ){  if (null != args.defaultLocationName)
  this.defaultLocationName = args.defaultLocationName
  if (null != args.defaultLatitude)
  this.defaultLatitude = args.defaultLatitude
  if (null != args.defaultLongitude)
  this.defaultLongitude = args.defaultLongitude
  if (null != args.preactivation)
  this.preactivation = args.preactivation
  if (null != args.viewedPromotions)
  this.viewedPromotions = args.viewedPromotions
  if (null != args.incomingEmailAddress)
  this.incomingEmailAddress = args.incomingEmailAddress
  if (null != args.recentMailedAddresses)
  this.recentMailedAddresses = args.recentMailedAddresses
  if (null != args.comments)
  this.comments = args.comments
  if (null != args.dateAgreedToTermsOfService)
  this.dateAgreedToTermsOfService = args.dateAgreedToTermsOfService
  if (null != args.maxReferrals)
  this.maxReferrals = args.maxReferrals
  if (null != args.referralCount)
  this.referralCount = args.referralCount
  if (null != args.refererCode)
  this.refererCode = args.refererCode
  if (null != args.sentEmailDate)
  this.sentEmailDate = args.sentEmailDate
  if (null != args.sentEmailCount)
  this.sentEmailCount = args.sentEmailCount
  if (null != args.dailyEmailLimit)
  this.dailyEmailLimit = args.dailyEmailLimit
  if (null != args.emailOptOutDate)
  this.emailOptOutDate = args.emailOptOutDate
  if (null != args.partnerEmailOptInDate)
  this.partnerEmailOptInDate = args.partnerEmailOptInDate
  if (null != args.preferredLanguage)
  this.preferredLanguage = args.preferredLanguage
  if (null != args.preferredCountry)
  this.preferredCountry = args.preferredCountry
  if (null != args.clipFullPage)
  this.clipFullPage = args.clipFullPage
  if (null != args.twitterUserName)
  this.twitterUserName = args.twitterUserName
  if (null != args.twitterId)
  this.twitterId = args.twitterId
  if (null != args.groupName)
  this.groupName = args.groupName
  if (null != args.recognitionLanguage)
  this.recognitionLanguage = args.recognitionLanguage
  if (null != args.customerProfileId)
  this.customerProfileId = args.customerProfileId
  if (null != args.referralProof)
  this.referralProof = args.referralProof
  if (null != args.educationalDiscount)
  this.educationalDiscount = args.educationalDiscount
  if (null != args.businessAddress)
  this.businessAddress = args.businessAddress
}}
UserAttributes.prototype = {}
UserAttributes.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.defaultLocationName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.DOUBLE) {
        this.defaultLatitude = input.readDouble()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.DOUBLE) {
        this.defaultLongitude = input.readDouble()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.BOOL) {
        this.preactivation = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.LIST) {
        {
          var _size0 = 0
          var rtmp3
          this.viewedPromotions = []
          var _etype3 = 0
          rtmp3 = input.readListBegin()
          _etype3 = rtmp3.etype
          _size0 = rtmp3.size
          for (var _i4 = 0; _i4 < _size0; ++_i4)
          {
            var elem5 = null
            elem5 = input.readString()
            this.viewedPromotions.push(elem5)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.STRING) {
        this.incomingEmailAddress = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.LIST) {
        {
          var _size6 = 0
          var rtmp3
          this.recentMailedAddresses = []
          var _etype9 = 0
          rtmp3 = input.readListBegin()
          _etype9 = rtmp3.etype
          _size6 = rtmp3.size
          for (var _i10 = 0; _i10 < _size6; ++_i10)
          {
            var elem11 = null
            elem11 = input.readString()
            this.recentMailedAddresses.push(elem11)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.STRING) {
        this.comments = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.I64) {
        this.dateAgreedToTermsOfService = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 12:      if (ftype == Thrift.Type.I32) {
        this.maxReferrals = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 13:      if (ftype == Thrift.Type.I32) {
        this.referralCount = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 14:      if (ftype == Thrift.Type.STRING) {
        this.refererCode = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 15:      if (ftype == Thrift.Type.I64) {
        this.sentEmailDate = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 16:      if (ftype == Thrift.Type.I32) {
        this.sentEmailCount = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 17:      if (ftype == Thrift.Type.I32) {
        this.dailyEmailLimit = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 18:      if (ftype == Thrift.Type.I64) {
        this.emailOptOutDate = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 19:      if (ftype == Thrift.Type.I64) {
        this.partnerEmailOptInDate = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 20:      if (ftype == Thrift.Type.STRING) {
        this.preferredLanguage = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 21:      if (ftype == Thrift.Type.STRING) {
        this.preferredCountry = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 22:      if (ftype == Thrift.Type.BOOL) {
        this.clipFullPage = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 23:      if (ftype == Thrift.Type.STRING) {
        this.twitterUserName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 24:      if (ftype == Thrift.Type.STRING) {
        this.twitterId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 25:      if (ftype == Thrift.Type.STRING) {
        this.groupName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 26:      if (ftype == Thrift.Type.STRING) {
        this.recognitionLanguage = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 27:      if (ftype == Thrift.Type.I64) {
        this.customerProfileId = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 28:      if (ftype == Thrift.Type.STRING) {
        this.referralProof = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 29:      if (ftype == Thrift.Type.BOOL) {
        this.educationalDiscount = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 30:      if (ftype == Thrift.Type.STRING) {
        this.businessAddress = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

UserAttributes.prototype.write = function(output){ 
  output.writeStructBegin('UserAttributes')
  if (null != this.defaultLocationName) {
    output.writeFieldBegin('defaultLocationName', Thrift.Type.STRING, 1)
    output.writeString(this.defaultLocationName)
    output.writeFieldEnd()
  }
  if (null != this.defaultLatitude) {
    output.writeFieldBegin('defaultLatitude', Thrift.Type.DOUBLE, 2)
    output.writeDouble(this.defaultLatitude)
    output.writeFieldEnd()
  }
  if (null != this.defaultLongitude) {
    output.writeFieldBegin('defaultLongitude', Thrift.Type.DOUBLE, 3)
    output.writeDouble(this.defaultLongitude)
    output.writeFieldEnd()
  }
  if (null != this.preactivation) {
    output.writeFieldBegin('preactivation', Thrift.Type.BOOL, 4)
    output.writeBool(this.preactivation)
    output.writeFieldEnd()
  }
  if (null != this.viewedPromotions) {
    output.writeFieldBegin('viewedPromotions', Thrift.Type.LIST, 5)
    {
      output.writeListBegin(Thrift.Type.STRING, this.viewedPromotions.length)
      {
        for(var iter12 in this.viewedPromotions)
        {
          if (this.viewedPromotions.hasOwnProperty(iter12))
          {
            iter12=this.viewedPromotions[iter12]
            output.writeString(iter12)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.incomingEmailAddress) {
    output.writeFieldBegin('incomingEmailAddress', Thrift.Type.STRING, 6)
    output.writeString(this.incomingEmailAddress)
    output.writeFieldEnd()
  }
  if (null != this.recentMailedAddresses) {
    output.writeFieldBegin('recentMailedAddresses', Thrift.Type.LIST, 7)
    {
      output.writeListBegin(Thrift.Type.STRING, this.recentMailedAddresses.length)
      {
        for(var iter13 in this.recentMailedAddresses)
        {
          if (this.recentMailedAddresses.hasOwnProperty(iter13))
          {
            iter13=this.recentMailedAddresses[iter13]
            output.writeString(iter13)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.comments) {
    output.writeFieldBegin('comments', Thrift.Type.STRING, 9)
    output.writeString(this.comments)
    output.writeFieldEnd()
  }
  if (null != this.dateAgreedToTermsOfService) {
    output.writeFieldBegin('dateAgreedToTermsOfService', Thrift.Type.I64, 11)
    output.writeI64(this.dateAgreedToTermsOfService)
    output.writeFieldEnd()
  }
  if (null != this.maxReferrals) {
    output.writeFieldBegin('maxReferrals', Thrift.Type.I32, 12)
    output.writeI32(this.maxReferrals)
    output.writeFieldEnd()
  }
  if (null != this.referralCount) {
    output.writeFieldBegin('referralCount', Thrift.Type.I32, 13)
    output.writeI32(this.referralCount)
    output.writeFieldEnd()
  }
  if (null != this.refererCode) {
    output.writeFieldBegin('refererCode', Thrift.Type.STRING, 14)
    output.writeString(this.refererCode)
    output.writeFieldEnd()
  }
  if (null != this.sentEmailDate) {
    output.writeFieldBegin('sentEmailDate', Thrift.Type.I64, 15)
    output.writeI64(this.sentEmailDate)
    output.writeFieldEnd()
  }
  if (null != this.sentEmailCount) {
    output.writeFieldBegin('sentEmailCount', Thrift.Type.I32, 16)
    output.writeI32(this.sentEmailCount)
    output.writeFieldEnd()
  }
  if (null != this.dailyEmailLimit) {
    output.writeFieldBegin('dailyEmailLimit', Thrift.Type.I32, 17)
    output.writeI32(this.dailyEmailLimit)
    output.writeFieldEnd()
  }
  if (null != this.emailOptOutDate) {
    output.writeFieldBegin('emailOptOutDate', Thrift.Type.I64, 18)
    output.writeI64(this.emailOptOutDate)
    output.writeFieldEnd()
  }
  if (null != this.partnerEmailOptInDate) {
    output.writeFieldBegin('partnerEmailOptInDate', Thrift.Type.I64, 19)
    output.writeI64(this.partnerEmailOptInDate)
    output.writeFieldEnd()
  }
  if (null != this.preferredLanguage) {
    output.writeFieldBegin('preferredLanguage', Thrift.Type.STRING, 20)
    output.writeString(this.preferredLanguage)
    output.writeFieldEnd()
  }
  if (null != this.preferredCountry) {
    output.writeFieldBegin('preferredCountry', Thrift.Type.STRING, 21)
    output.writeString(this.preferredCountry)
    output.writeFieldEnd()
  }
  if (null != this.clipFullPage) {
    output.writeFieldBegin('clipFullPage', Thrift.Type.BOOL, 22)
    output.writeBool(this.clipFullPage)
    output.writeFieldEnd()
  }
  if (null != this.twitterUserName) {
    output.writeFieldBegin('twitterUserName', Thrift.Type.STRING, 23)
    output.writeString(this.twitterUserName)
    output.writeFieldEnd()
  }
  if (null != this.twitterId) {
    output.writeFieldBegin('twitterId', Thrift.Type.STRING, 24)
    output.writeString(this.twitterId)
    output.writeFieldEnd()
  }
  if (null != this.groupName) {
    output.writeFieldBegin('groupName', Thrift.Type.STRING, 25)
    output.writeString(this.groupName)
    output.writeFieldEnd()
  }
  if (null != this.recognitionLanguage) {
    output.writeFieldBegin('recognitionLanguage', Thrift.Type.STRING, 26)
    output.writeString(this.recognitionLanguage)
    output.writeFieldEnd()
  }
  if (null != this.customerProfileId) {
    output.writeFieldBegin('customerProfileId', Thrift.Type.I64, 27)
    output.writeI64(this.customerProfileId)
    output.writeFieldEnd()
  }
  if (null != this.referralProof) {
    output.writeFieldBegin('referralProof', Thrift.Type.STRING, 28)
    output.writeString(this.referralProof)
    output.writeFieldEnd()
  }
  if (null != this.educationalDiscount) {
    output.writeFieldBegin('educationalDiscount', Thrift.Type.BOOL, 29)
    output.writeBool(this.educationalDiscount)
    output.writeFieldEnd()
  }
  if (null != this.businessAddress) {
    output.writeFieldBegin('businessAddress', Thrift.Type.STRING, 30)
    output.writeString(this.businessAddress)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Accounting = module.exports.Accounting = function(args){
  this.uploadLimit = null
  this.uploadLimitEnd = null
  this.uploadLimitNextMonth = null
  this.premiumServiceStatus = null
  this.premiumOrderNumber = null
  this.premiumCommerceService = null
  this.premiumServiceStart = null
  this.premiumServiceSKU = null
  this.lastSuccessfulCharge = null
  this.lastFailedCharge = null
  this.lastFailedChargeReason = null
  this.nextPaymentDue = null
  this.premiumLockUntil = null
  this.updated = null
  this.premiumSubscriptionNumber = null
  this.lastRequestedCharge = null
  this.currency = null
  this.unitPrice = null
if( args != null ){  if (null != args.uploadLimit)
  this.uploadLimit = args.uploadLimit
  if (null != args.uploadLimitEnd)
  this.uploadLimitEnd = args.uploadLimitEnd
  if (null != args.uploadLimitNextMonth)
  this.uploadLimitNextMonth = args.uploadLimitNextMonth
  if (null != args.premiumServiceStatus)
  this.premiumServiceStatus = args.premiumServiceStatus
  if (null != args.premiumOrderNumber)
  this.premiumOrderNumber = args.premiumOrderNumber
  if (null != args.premiumCommerceService)
  this.premiumCommerceService = args.premiumCommerceService
  if (null != args.premiumServiceStart)
  this.premiumServiceStart = args.premiumServiceStart
  if (null != args.premiumServiceSKU)
  this.premiumServiceSKU = args.premiumServiceSKU
  if (null != args.lastSuccessfulCharge)
  this.lastSuccessfulCharge = args.lastSuccessfulCharge
  if (null != args.lastFailedCharge)
  this.lastFailedCharge = args.lastFailedCharge
  if (null != args.lastFailedChargeReason)
  this.lastFailedChargeReason = args.lastFailedChargeReason
  if (null != args.nextPaymentDue)
  this.nextPaymentDue = args.nextPaymentDue
  if (null != args.premiumLockUntil)
  this.premiumLockUntil = args.premiumLockUntil
  if (null != args.updated)
  this.updated = args.updated
  if (null != args.premiumSubscriptionNumber)
  this.premiumSubscriptionNumber = args.premiumSubscriptionNumber
  if (null != args.lastRequestedCharge)
  this.lastRequestedCharge = args.lastRequestedCharge
  if (null != args.currency)
  this.currency = args.currency
  if (null != args.unitPrice)
  this.unitPrice = args.unitPrice
}}
Accounting.prototype = {}
Accounting.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I64) {
        this.uploadLimit = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I64) {
        this.uploadLimitEnd = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I64) {
        this.uploadLimitNextMonth = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I32) {
        this.premiumServiceStatus = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.STRING) {
        this.premiumOrderNumber = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.STRING) {
        this.premiumCommerceService = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.I64) {
        this.premiumServiceStart = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.STRING) {
        this.premiumServiceSKU = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.I64) {
        this.lastSuccessfulCharge = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.I64) {
        this.lastFailedCharge = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.STRING) {
        this.lastFailedChargeReason = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 12:      if (ftype == Thrift.Type.I64) {
        this.nextPaymentDue = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 13:      if (ftype == Thrift.Type.I64) {
        this.premiumLockUntil = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 14:      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 16:      if (ftype == Thrift.Type.STRING) {
        this.premiumSubscriptionNumber = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 17:      if (ftype == Thrift.Type.I64) {
        this.lastRequestedCharge = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 18:      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 19:      if (ftype == Thrift.Type.I32) {
        this.unitPrice = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Accounting.prototype.write = function(output){ 
  output.writeStructBegin('Accounting')
  if (null != this.uploadLimit) {
    output.writeFieldBegin('uploadLimit', Thrift.Type.I64, 1)
    output.writeI64(this.uploadLimit)
    output.writeFieldEnd()
  }
  if (null != this.uploadLimitEnd) {
    output.writeFieldBegin('uploadLimitEnd', Thrift.Type.I64, 2)
    output.writeI64(this.uploadLimitEnd)
    output.writeFieldEnd()
  }
  if (null != this.uploadLimitNextMonth) {
    output.writeFieldBegin('uploadLimitNextMonth', Thrift.Type.I64, 3)
    output.writeI64(this.uploadLimitNextMonth)
    output.writeFieldEnd()
  }
  if (null != this.premiumServiceStatus) {
    output.writeFieldBegin('premiumServiceStatus', Thrift.Type.I32, 4)
    output.writeI32(this.premiumServiceStatus)
    output.writeFieldEnd()
  }
  if (null != this.premiumOrderNumber) {
    output.writeFieldBegin('premiumOrderNumber', Thrift.Type.STRING, 5)
    output.writeString(this.premiumOrderNumber)
    output.writeFieldEnd()
  }
  if (null != this.premiumCommerceService) {
    output.writeFieldBegin('premiumCommerceService', Thrift.Type.STRING, 6)
    output.writeString(this.premiumCommerceService)
    output.writeFieldEnd()
  }
  if (null != this.premiumServiceStart) {
    output.writeFieldBegin('premiumServiceStart', Thrift.Type.I64, 7)
    output.writeI64(this.premiumServiceStart)
    output.writeFieldEnd()
  }
  if (null != this.premiumServiceSKU) {
    output.writeFieldBegin('premiumServiceSKU', Thrift.Type.STRING, 8)
    output.writeString(this.premiumServiceSKU)
    output.writeFieldEnd()
  }
  if (null != this.lastSuccessfulCharge) {
    output.writeFieldBegin('lastSuccessfulCharge', Thrift.Type.I64, 9)
    output.writeI64(this.lastSuccessfulCharge)
    output.writeFieldEnd()
  }
  if (null != this.lastFailedCharge) {
    output.writeFieldBegin('lastFailedCharge', Thrift.Type.I64, 10)
    output.writeI64(this.lastFailedCharge)
    output.writeFieldEnd()
  }
  if (null != this.lastFailedChargeReason) {
    output.writeFieldBegin('lastFailedChargeReason', Thrift.Type.STRING, 11)
    output.writeString(this.lastFailedChargeReason)
    output.writeFieldEnd()
  }
  if (null != this.nextPaymentDue) {
    output.writeFieldBegin('nextPaymentDue', Thrift.Type.I64, 12)
    output.writeI64(this.nextPaymentDue)
    output.writeFieldEnd()
  }
  if (null != this.premiumLockUntil) {
    output.writeFieldBegin('premiumLockUntil', Thrift.Type.I64, 13)
    output.writeI64(this.premiumLockUntil)
    output.writeFieldEnd()
  }
  if (null != this.updated) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 14)
    output.writeI64(this.updated)
    output.writeFieldEnd()
  }
  if (null != this.premiumSubscriptionNumber) {
    output.writeFieldBegin('premiumSubscriptionNumber', Thrift.Type.STRING, 16)
    output.writeString(this.premiumSubscriptionNumber)
    output.writeFieldEnd()
  }
  if (null != this.lastRequestedCharge) {
    output.writeFieldBegin('lastRequestedCharge', Thrift.Type.I64, 17)
    output.writeI64(this.lastRequestedCharge)
    output.writeFieldEnd()
  }
  if (null != this.currency) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 18)
    output.writeString(this.currency)
    output.writeFieldEnd()
  }
  if (null != this.unitPrice) {
    output.writeFieldBegin('unitPrice', Thrift.Type.I32, 19)
    output.writeI32(this.unitPrice)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var User = module.exports.User = function(args){
  this.id = null
  this.username = null
  this.email = null
  this.name = null
  this.timezone = null
  this.privilege = null
  this.created = null
  this.updated = null
  this.deleted = null
  this.active = null
  this.shardId = null
  this.attributes = null
  this.accounting = null
if( args != null ){  if (null != args.id)
  this.id = args.id
  if (null != args.username)
  this.username = args.username
  if (null != args.email)
  this.email = args.email
  if (null != args.name)
  this.name = args.name
  if (null != args.timezone)
  this.timezone = args.timezone
  if (null != args.privilege)
  this.privilege = args.privilege
  if (null != args.created)
  this.created = args.created
  if (null != args.updated)
  this.updated = args.updated
  if (null != args.deleted)
  this.deleted = args.deleted
  if (null != args.active)
  this.active = args.active
  if (null != args.shardId)
  this.shardId = args.shardId
  if (null != args.attributes)
  this.attributes = args.attributes
  if (null != args.accounting)
  this.accounting = args.accounting
}}
User.prototype = {}
User.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.STRING) {
        this.timezone = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 13:      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 14:      if (ftype == Thrift.Type.STRING) {
        this.shardId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 15:      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new ttypes.UserAttributes()
        this.attributes.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 16:      if (ftype == Thrift.Type.STRUCT) {
        this.accounting = new ttypes.Accounting()
        this.accounting.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

User.prototype.write = function(output){ 
  output.writeStructBegin('User')
  if (null != this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1)
    output.writeI32(this.id)
    output.writeFieldEnd()
  }
  if (null != this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2)
    output.writeString(this.username)
    output.writeFieldEnd()
  }
  if (null != this.email) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3)
    output.writeString(this.email)
    output.writeFieldEnd()
  }
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.timezone) {
    output.writeFieldBegin('timezone', Thrift.Type.STRING, 6)
    output.writeString(this.timezone)
    output.writeFieldEnd()
  }
  if (null != this.privilege) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 7)
    output.writeI32(this.privilege)
    output.writeFieldEnd()
  }
  if (null != this.created) {
    output.writeFieldBegin('created', Thrift.Type.I64, 9)
    output.writeI64(this.created)
    output.writeFieldEnd()
  }
  if (null != this.updated) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 10)
    output.writeI64(this.updated)
    output.writeFieldEnd()
  }
  if (null != this.deleted) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 11)
    output.writeI64(this.deleted)
    output.writeFieldEnd()
  }
  if (null != this.active) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 13)
    output.writeBool(this.active)
    output.writeFieldEnd()
  }
  if (null != this.shardId) {
    output.writeFieldBegin('shardId', Thrift.Type.STRING, 14)
    output.writeString(this.shardId)
    output.writeFieldEnd()
  }
  if (null != this.attributes) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 15)
    this.attributes.write(output)
    output.writeFieldEnd()
  }
  if (null != this.accounting) {
    output.writeFieldBegin('accounting', Thrift.Type.STRUCT, 16)
    this.accounting.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Tag = module.exports.Tag = function(args){
  this.guid = null
  this.name = null
  this.parentGuid = null
  this.updateSequenceNum = null
if( args != null ){  if (null != args.guid)
  this.guid = args.guid
  if (null != args.name)
  this.name = args.name
  if (null != args.parentGuid)
  this.parentGuid = args.parentGuid
  if (null != args.updateSequenceNum)
  this.updateSequenceNum = args.updateSequenceNum
}}
Tag.prototype = {}
Tag.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.parentGuid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Tag.prototype.write = function(output){ 
  output.writeStructBegin('Tag')
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.parentGuid) {
    output.writeFieldBegin('parentGuid', Thrift.Type.STRING, 3)
    output.writeString(this.parentGuid)
    output.writeFieldEnd()
  }
  if (null != this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 4)
    output.writeI32(this.updateSequenceNum)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var ResourceAttributes = module.exports.ResourceAttributes = function(args){
  this.sourceURL = null
  this.timestamp = null
  this.latitude = null
  this.longitude = null
  this.altitude = null
  this.cameraMake = null
  this.cameraModel = null
  this.clientWillIndex = null
  this.recoType = null
  this.fileName = null
  this.attachment = null
if( args != null ){  if (null != args.sourceURL)
  this.sourceURL = args.sourceURL
  if (null != args.timestamp)
  this.timestamp = args.timestamp
  if (null != args.latitude)
  this.latitude = args.latitude
  if (null != args.longitude)
  this.longitude = args.longitude
  if (null != args.altitude)
  this.altitude = args.altitude
  if (null != args.cameraMake)
  this.cameraMake = args.cameraMake
  if (null != args.cameraModel)
  this.cameraModel = args.cameraModel
  if (null != args.clientWillIndex)
  this.clientWillIndex = args.clientWillIndex
  if (null != args.recoType)
  this.recoType = args.recoType
  if (null != args.fileName)
  this.fileName = args.fileName
  if (null != args.attachment)
  this.attachment = args.attachment
}}
ResourceAttributes.prototype = {}
ResourceAttributes.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.sourceURL = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.DOUBLE) {
        this.altitude = input.readDouble()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.STRING) {
        this.cameraMake = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.STRING) {
        this.cameraModel = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.BOOL) {
        this.clientWillIndex = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.STRING) {
        this.recoType = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.BOOL) {
        this.attachment = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ResourceAttributes.prototype.write = function(output){ 
  output.writeStructBegin('ResourceAttributes')
  if (null != this.sourceURL) {
    output.writeFieldBegin('sourceURL', Thrift.Type.STRING, 1)
    output.writeString(this.sourceURL)
    output.writeFieldEnd()
  }
  if (null != this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2)
    output.writeI64(this.timestamp)
    output.writeFieldEnd()
  }
  if (null != this.latitude) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3)
    output.writeDouble(this.latitude)
    output.writeFieldEnd()
  }
  if (null != this.longitude) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4)
    output.writeDouble(this.longitude)
    output.writeFieldEnd()
  }
  if (null != this.altitude) {
    output.writeFieldBegin('altitude', Thrift.Type.DOUBLE, 5)
    output.writeDouble(this.altitude)
    output.writeFieldEnd()
  }
  if (null != this.cameraMake) {
    output.writeFieldBegin('cameraMake', Thrift.Type.STRING, 6)
    output.writeString(this.cameraMake)
    output.writeFieldEnd()
  }
  if (null != this.cameraModel) {
    output.writeFieldBegin('cameraModel', Thrift.Type.STRING, 7)
    output.writeString(this.cameraModel)
    output.writeFieldEnd()
  }
  if (null != this.clientWillIndex) {
    output.writeFieldBegin('clientWillIndex', Thrift.Type.BOOL, 8)
    output.writeBool(this.clientWillIndex)
    output.writeFieldEnd()
  }
  if (null != this.recoType) {
    output.writeFieldBegin('recoType', Thrift.Type.STRING, 9)
    output.writeString(this.recoType)
    output.writeFieldEnd()
  }
  if (null != this.fileName) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 10)
    output.writeString(this.fileName)
    output.writeFieldEnd()
  }
  if (null != this.attachment) {
    output.writeFieldBegin('attachment', Thrift.Type.BOOL, 11)
    output.writeBool(this.attachment)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Resource = module.exports.Resource = function(args){
  this.guid = null
  this.noteGuid = null
  this.data = null
  this.mime = null
  this.width = null
  this.height = null
  this.duration = null
  this.active = null
  this.recognition = null
  this.attributes = null
  this.updateSequenceNum = null
  this.alternateData = null
if( args != null ){  if (null != args.guid)
  this.guid = args.guid
  if (null != args.noteGuid)
  this.noteGuid = args.noteGuid
  if (null != args.data)
  this.data = args.data
  if (null != args.mime)
  this.mime = args.mime
  if (null != args.width)
  this.width = args.width
  if (null != args.height)
  this.height = args.height
  if (null != args.duration)
  this.duration = args.duration
  if (null != args.active)
  this.active = args.active
  if (null != args.recognition)
  this.recognition = args.recognition
  if (null != args.attributes)
  this.attributes = args.attributes
  if (null != args.updateSequenceNum)
  this.updateSequenceNum = args.updateSequenceNum
  if (null != args.alternateData)
  this.alternateData = args.alternateData
}}
Resource.prototype = {}
Resource.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.noteGuid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.Data()
        this.data.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.mime = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I16) {
        this.width = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.I16) {
        this.height = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.I16) {
        this.duration = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.STRUCT) {
        this.recognition = new ttypes.Data()
        this.recognition.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new ttypes.ResourceAttributes()
        this.attributes.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 12:      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 13:      if (ftype == Thrift.Type.STRUCT) {
        this.alternateData = new ttypes.Data()
        this.alternateData.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Resource.prototype.write = function(output){ 
  output.writeStructBegin('Resource')
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  if (null != this.noteGuid) {
    output.writeFieldBegin('noteGuid', Thrift.Type.STRING, 2)
    output.writeString(this.noteGuid)
    output.writeFieldEnd()
  }
  if (null != this.data) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3)
    this.data.write(output)
    output.writeFieldEnd()
  }
  if (null != this.mime) {
    output.writeFieldBegin('mime', Thrift.Type.STRING, 4)
    output.writeString(this.mime)
    output.writeFieldEnd()
  }
  if (null != this.width) {
    output.writeFieldBegin('width', Thrift.Type.I16, 5)
    output.writeI16(this.width)
    output.writeFieldEnd()
  }
  if (null != this.height) {
    output.writeFieldBegin('height', Thrift.Type.I16, 6)
    output.writeI16(this.height)
    output.writeFieldEnd()
  }
  if (null != this.duration) {
    output.writeFieldBegin('duration', Thrift.Type.I16, 7)
    output.writeI16(this.duration)
    output.writeFieldEnd()
  }
  if (null != this.active) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 8)
    output.writeBool(this.active)
    output.writeFieldEnd()
  }
  if (null != this.recognition) {
    output.writeFieldBegin('recognition', Thrift.Type.STRUCT, 9)
    this.recognition.write(output)
    output.writeFieldEnd()
  }
  if (null != this.attributes) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 11)
    this.attributes.write(output)
    output.writeFieldEnd()
  }
  if (null != this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 12)
    output.writeI32(this.updateSequenceNum)
    output.writeFieldEnd()
  }
  if (null != this.alternateData) {
    output.writeFieldBegin('alternateData', Thrift.Type.STRUCT, 13)
    this.alternateData.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteAttributes = module.exports.NoteAttributes = function(args){
  this.subjectDate = null
  this.latitude = null
  this.longitude = null
  this.altitude = null
  this.author = null
  this.source = null
  this.sourceURL = null
  this.sourceApplication = null
  this.shareDate = null
if( args != null ){  if (null != args.subjectDate)
  this.subjectDate = args.subjectDate
  if (null != args.latitude)
  this.latitude = args.latitude
  if (null != args.longitude)
  this.longitude = args.longitude
  if (null != args.altitude)
  this.altitude = args.altitude
  if (null != args.author)
  this.author = args.author
  if (null != args.source)
  this.source = args.source
  if (null != args.sourceURL)
  this.sourceURL = args.sourceURL
  if (null != args.sourceApplication)
  this.sourceApplication = args.sourceApplication
  if (null != args.shareDate)
  this.shareDate = args.shareDate
}}
NoteAttributes.prototype = {}
NoteAttributes.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I64) {
        this.subjectDate = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble()
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble()
      } else {
        input.skip(ftype)
      }
      break
      case 12:      if (ftype == Thrift.Type.DOUBLE) {
        this.altitude = input.readDouble()
      } else {
        input.skip(ftype)
      }
      break
      case 13:      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 14:      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 15:      if (ftype == Thrift.Type.STRING) {
        this.sourceURL = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 16:      if (ftype == Thrift.Type.STRING) {
        this.sourceApplication = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 17:      if (ftype == Thrift.Type.I64) {
        this.shareDate = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteAttributes.prototype.write = function(output){ 
  output.writeStructBegin('NoteAttributes')
  if (null != this.subjectDate) {
    output.writeFieldBegin('subjectDate', Thrift.Type.I64, 1)
    output.writeI64(this.subjectDate)
    output.writeFieldEnd()
  }
  if (null != this.latitude) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 10)
    output.writeDouble(this.latitude)
    output.writeFieldEnd()
  }
  if (null != this.longitude) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 11)
    output.writeDouble(this.longitude)
    output.writeFieldEnd()
  }
  if (null != this.altitude) {
    output.writeFieldBegin('altitude', Thrift.Type.DOUBLE, 12)
    output.writeDouble(this.altitude)
    output.writeFieldEnd()
  }
  if (null != this.author) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 13)
    output.writeString(this.author)
    output.writeFieldEnd()
  }
  if (null != this.source) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 14)
    output.writeString(this.source)
    output.writeFieldEnd()
  }
  if (null != this.sourceURL) {
    output.writeFieldBegin('sourceURL', Thrift.Type.STRING, 15)
    output.writeString(this.sourceURL)
    output.writeFieldEnd()
  }
  if (null != this.sourceApplication) {
    output.writeFieldBegin('sourceApplication', Thrift.Type.STRING, 16)
    output.writeString(this.sourceApplication)
    output.writeFieldEnd()
  }
  if (null != this.shareDate) {
    output.writeFieldBegin('shareDate', Thrift.Type.I64, 17)
    output.writeI64(this.shareDate)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Note = module.exports.Note = function(args){
  this.guid = null
  this.title = null
  this.content = null
  this.contentHash = null
  this.contentLength = null
  this.created = null
  this.updated = null
  this.deleted = null
  this.active = null
  this.updateSequenceNum = null
  this.notebookGuid = null
  this.tagGuids = null
  this.resources = null
  this.attributes = null
  this.tagNames = null
if( args != null ){  if (null != args.guid)
  this.guid = args.guid
  if (null != args.title)
  this.title = args.title
  if (null != args.content)
  this.content = args.content
  if (null != args.contentHash)
  this.contentHash = args.contentHash
  if (null != args.contentLength)
  this.contentLength = args.contentLength
  if (null != args.created)
  this.created = args.created
  if (null != args.updated)
  this.updated = args.updated
  if (null != args.deleted)
  this.deleted = args.deleted
  if (null != args.active)
  this.active = args.active
  if (null != args.updateSequenceNum)
  this.updateSequenceNum = args.updateSequenceNum
  if (null != args.notebookGuid)
  this.notebookGuid = args.notebookGuid
  if (null != args.tagGuids)
  this.tagGuids = args.tagGuids
  if (null != args.resources)
  this.resources = args.resources
  if (null != args.attributes)
  this.attributes = args.attributes
  if (null != args.tagNames)
  this.tagNames = args.tagNames
}}
Note.prototype = {}
Note.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.contentHash = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I32) {
        this.contentLength = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 12:      if (ftype == Thrift.Type.LIST) {
        {
          var _size14 = 0
          var rtmp3
          this.tagGuids = []
          var _etype17 = 0
          rtmp3 = input.readListBegin()
          _etype17 = rtmp3.etype
          _size14 = rtmp3.size
          for (var _i18 = 0; _i18 < _size14; ++_i18)
          {
            var elem19 = null
            elem19 = input.readString()
            this.tagGuids.push(elem19)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 13:      if (ftype == Thrift.Type.LIST) {
        {
          var _size20 = 0
          var rtmp3
          this.resources = []
          var _etype23 = 0
          rtmp3 = input.readListBegin()
          _etype23 = rtmp3.etype
          _size20 = rtmp3.size
          for (var _i24 = 0; _i24 < _size20; ++_i24)
          {
            var elem25 = null
            elem25 = new ttypes.Resource()
            elem25.read(input)
            this.resources.push(elem25)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 14:      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new ttypes.NoteAttributes()
        this.attributes.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 15:      if (ftype == Thrift.Type.LIST) {
        {
          var _size26 = 0
          var rtmp3
          this.tagNames = []
          var _etype29 = 0
          rtmp3 = input.readListBegin()
          _etype29 = rtmp3.etype
          _size26 = rtmp3.size
          for (var _i30 = 0; _i30 < _size26; ++_i30)
          {
            var elem31 = null
            elem31 = input.readString()
            this.tagNames.push(elem31)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Note.prototype.write = function(output){ 
  output.writeStructBegin('Note')
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  if (null != this.title) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2)
    output.writeString(this.title)
    output.writeFieldEnd()
  }
  if (null != this.content) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3)
    output.writeString(this.content)
    output.writeFieldEnd()
  }
  if (null != this.contentHash) {
    output.writeFieldBegin('contentHash', Thrift.Type.STRING, 4)
    output.writeString(this.contentHash)
    output.writeFieldEnd()
  }
  if (null != this.contentLength) {
    output.writeFieldBegin('contentLength', Thrift.Type.I32, 5)
    output.writeI32(this.contentLength)
    output.writeFieldEnd()
  }
  if (null != this.created) {
    output.writeFieldBegin('created', Thrift.Type.I64, 6)
    output.writeI64(this.created)
    output.writeFieldEnd()
  }
  if (null != this.updated) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 7)
    output.writeI64(this.updated)
    output.writeFieldEnd()
  }
  if (null != this.deleted) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 8)
    output.writeI64(this.deleted)
    output.writeFieldEnd()
  }
  if (null != this.active) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 9)
    output.writeBool(this.active)
    output.writeFieldEnd()
  }
  if (null != this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 10)
    output.writeI32(this.updateSequenceNum)
    output.writeFieldEnd()
  }
  if (null != this.notebookGuid) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 11)
    output.writeString(this.notebookGuid)
    output.writeFieldEnd()
  }
  if (null != this.tagGuids) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 12)
    {
      output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length)
      {
        for(var iter32 in this.tagGuids)
        {
          if (this.tagGuids.hasOwnProperty(iter32))
          {
            iter32=this.tagGuids[iter32]
            output.writeString(iter32)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.resources) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 13)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.resources.length)
      {
        for(var iter33 in this.resources)
        {
          if (this.resources.hasOwnProperty(iter33))
          {
            iter33=this.resources[iter33]
            iter33.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.attributes) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 14)
    this.attributes.write(output)
    output.writeFieldEnd()
  }
  if (null != this.tagNames) {
    output.writeFieldBegin('tagNames', Thrift.Type.LIST, 15)
    {
      output.writeListBegin(Thrift.Type.STRING, this.tagNames.length)
      {
        for(var iter34 in this.tagNames)
        {
          if (this.tagNames.hasOwnProperty(iter34))
          {
            iter34=this.tagNames[iter34]
            output.writeString(iter34)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Publishing = module.exports.Publishing = function(args){
  this.uri = null
  this.order = null
  this.ascending = null
  this.publicDescription = null
if( args != null ){  if (null != args.uri)
  this.uri = args.uri
  if (null != args.order)
  this.order = args.order
  if (null != args.ascending)
  this.ascending = args.ascending
  if (null != args.publicDescription)
  this.publicDescription = args.publicDescription
}}
Publishing.prototype = {}
Publishing.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.BOOL) {
        this.ascending = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.publicDescription = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Publishing.prototype.write = function(output){ 
  output.writeStructBegin('Publishing')
  if (null != this.uri) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1)
    output.writeString(this.uri)
    output.writeFieldEnd()
  }
  if (null != this.order) {
    output.writeFieldBegin('order', Thrift.Type.I32, 2)
    output.writeI32(this.order)
    output.writeFieldEnd()
  }
  if (null != this.ascending) {
    output.writeFieldBegin('ascending', Thrift.Type.BOOL, 3)
    output.writeBool(this.ascending)
    output.writeFieldEnd()
  }
  if (null != this.publicDescription) {
    output.writeFieldBegin('publicDescription', Thrift.Type.STRING, 4)
    output.writeString(this.publicDescription)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Notebook = module.exports.Notebook = function(args){
  this.guid = null
  this.name = null
  this.updateSequenceNum = null
  this.defaultNotebook = null
  this.serviceCreated = null
  this.serviceUpdated = null
  this.publishing = null
  this.published = null
  this.stack = null
  this.sharedNotebookIds = null
if( args != null ){  if (null != args.guid)
  this.guid = args.guid
  if (null != args.name)
  this.name = args.name
  if (null != args.updateSequenceNum)
  this.updateSequenceNum = args.updateSequenceNum
  if (null != args.defaultNotebook)
  this.defaultNotebook = args.defaultNotebook
  if (null != args.serviceCreated)
  this.serviceCreated = args.serviceCreated
  if (null != args.serviceUpdated)
  this.serviceUpdated = args.serviceUpdated
  if (null != args.publishing)
  this.publishing = args.publishing
  if (null != args.published)
  this.published = args.published
  if (null != args.stack)
  this.stack = args.stack
  if (null != args.sharedNotebookIds)
  this.sharedNotebookIds = args.sharedNotebookIds
}}
Notebook.prototype = {}
Notebook.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.BOOL) {
        this.defaultNotebook = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.I64) {
        this.serviceCreated = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.I64) {
        this.serviceUpdated = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.STRUCT) {
        this.publishing = new ttypes.Publishing()
        this.publishing.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.BOOL) {
        this.published = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 12:      if (ftype == Thrift.Type.STRING) {
        this.stack = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 13:      if (ftype == Thrift.Type.LIST) {
        {
          var _size35 = 0
          var rtmp3
          this.sharedNotebookIds = []
          var _etype38 = 0
          rtmp3 = input.readListBegin()
          _etype38 = rtmp3.etype
          _size35 = rtmp3.size
          for (var _i39 = 0; _i39 < _size35; ++_i39)
          {
            var elem40 = null
            elem40 = input.readI64()
            this.sharedNotebookIds.push(elem40)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Notebook.prototype.write = function(output){ 
  output.writeStructBegin('Notebook')
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 5)
    output.writeI32(this.updateSequenceNum)
    output.writeFieldEnd()
  }
  if (null != this.defaultNotebook) {
    output.writeFieldBegin('defaultNotebook', Thrift.Type.BOOL, 6)
    output.writeBool(this.defaultNotebook)
    output.writeFieldEnd()
  }
  if (null != this.serviceCreated) {
    output.writeFieldBegin('serviceCreated', Thrift.Type.I64, 7)
    output.writeI64(this.serviceCreated)
    output.writeFieldEnd()
  }
  if (null != this.serviceUpdated) {
    output.writeFieldBegin('serviceUpdated', Thrift.Type.I64, 8)
    output.writeI64(this.serviceUpdated)
    output.writeFieldEnd()
  }
  if (null != this.publishing) {
    output.writeFieldBegin('publishing', Thrift.Type.STRUCT, 10)
    this.publishing.write(output)
    output.writeFieldEnd()
  }
  if (null != this.published) {
    output.writeFieldBegin('published', Thrift.Type.BOOL, 11)
    output.writeBool(this.published)
    output.writeFieldEnd()
  }
  if (null != this.stack) {
    output.writeFieldBegin('stack', Thrift.Type.STRING, 12)
    output.writeString(this.stack)
    output.writeFieldEnd()
  }
  if (null != this.sharedNotebookIds) {
    output.writeFieldBegin('sharedNotebookIds', Thrift.Type.LIST, 13)
    {
      output.writeListBegin(Thrift.Type.I64, this.sharedNotebookIds.length)
      {
        for(var iter41 in this.sharedNotebookIds)
        {
          if (this.sharedNotebookIds.hasOwnProperty(iter41))
          {
            iter41=this.sharedNotebookIds[iter41]
            output.writeI64(iter41)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var SavedSearch = module.exports.SavedSearch = function(args){
  this.guid = null
  this.name = null
  this.query = null
  this.format = null
  this.updateSequenceNum = null
if( args != null ){  if (null != args.guid)
  this.guid = args.guid
  if (null != args.name)
  this.name = args.name
  if (null != args.query)
  this.query = args.query
  if (null != args.format)
  this.format = args.format
  if (null != args.updateSequenceNum)
  this.updateSequenceNum = args.updateSequenceNum
}}
SavedSearch.prototype = {}
SavedSearch.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I32) {
        this.format = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

SavedSearch.prototype.write = function(output){ 
  output.writeStructBegin('SavedSearch')
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  if (null != this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (null != this.query) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 3)
    output.writeString(this.query)
    output.writeFieldEnd()
  }
  if (null != this.format) {
    output.writeFieldBegin('format', Thrift.Type.I32, 4)
    output.writeI32(this.format)
    output.writeFieldEnd()
  }
  if (null != this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 5)
    output.writeI32(this.updateSequenceNum)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Ad = module.exports.Ad = function(args){
  this.id = null
  this.width = null
  this.height = null
  this.advertiserName = null
  this.imageUrl = null
  this.destinationUrl = null
  this.displaySeconds = null
  this.score = null
  this.image = null
  this.imageMime = null
  this.html = null
  this.displayFrequency = null
  this.openInTrunk = null
if( args != null ){  if (null != args.id)
  this.id = args.id
  if (null != args.width)
  this.width = args.width
  if (null != args.height)
  this.height = args.height
  if (null != args.advertiserName)
  this.advertiserName = args.advertiserName
  if (null != args.imageUrl)
  this.imageUrl = args.imageUrl
  if (null != args.destinationUrl)
  this.destinationUrl = args.destinationUrl
  if (null != args.displaySeconds)
  this.displaySeconds = args.displaySeconds
  if (null != args.score)
  this.score = args.score
  if (null != args.image)
  this.image = args.image
  if (null != args.imageMime)
  this.imageMime = args.imageMime
  if (null != args.html)
  this.html = args.html
  if (null != args.displayFrequency)
  this.displayFrequency = args.displayFrequency
  if (null != args.openInTrunk)
  this.openInTrunk = args.openInTrunk
}}
Ad.prototype = {}
Ad.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I16) {
        this.width = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I16) {
        this.height = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.advertiserName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.STRING) {
        this.imageUrl = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.STRING) {
        this.destinationUrl = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.I16) {
        this.displaySeconds = input.readI16()
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble()
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.STRING) {
        this.imageMime = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.STRING) {
        this.html = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 12:      if (ftype == Thrift.Type.DOUBLE) {
        this.displayFrequency = input.readDouble()
      } else {
        input.skip(ftype)
      }
      break
      case 13:      if (ftype == Thrift.Type.BOOL) {
        this.openInTrunk = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Ad.prototype.write = function(output){ 
  output.writeStructBegin('Ad')
  if (null != this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1)
    output.writeI32(this.id)
    output.writeFieldEnd()
  }
  if (null != this.width) {
    output.writeFieldBegin('width', Thrift.Type.I16, 2)
    output.writeI16(this.width)
    output.writeFieldEnd()
  }
  if (null != this.height) {
    output.writeFieldBegin('height', Thrift.Type.I16, 3)
    output.writeI16(this.height)
    output.writeFieldEnd()
  }
  if (null != this.advertiserName) {
    output.writeFieldBegin('advertiserName', Thrift.Type.STRING, 4)
    output.writeString(this.advertiserName)
    output.writeFieldEnd()
  }
  if (null != this.imageUrl) {
    output.writeFieldBegin('imageUrl', Thrift.Type.STRING, 5)
    output.writeString(this.imageUrl)
    output.writeFieldEnd()
  }
  if (null != this.destinationUrl) {
    output.writeFieldBegin('destinationUrl', Thrift.Type.STRING, 6)
    output.writeString(this.destinationUrl)
    output.writeFieldEnd()
  }
  if (null != this.displaySeconds) {
    output.writeFieldBegin('displaySeconds', Thrift.Type.I16, 7)
    output.writeI16(this.displaySeconds)
    output.writeFieldEnd()
  }
  if (null != this.score) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 8)
    output.writeDouble(this.score)
    output.writeFieldEnd()
  }
  if (null != this.image) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 9)
    output.writeString(this.image)
    output.writeFieldEnd()
  }
  if (null != this.imageMime) {
    output.writeFieldBegin('imageMime', Thrift.Type.STRING, 10)
    output.writeString(this.imageMime)
    output.writeFieldEnd()
  }
  if (null != this.html) {
    output.writeFieldBegin('html', Thrift.Type.STRING, 11)
    output.writeString(this.html)
    output.writeFieldEnd()
  }
  if (null != this.displayFrequency) {
    output.writeFieldBegin('displayFrequency', Thrift.Type.DOUBLE, 12)
    output.writeDouble(this.displayFrequency)
    output.writeFieldEnd()
  }
  if (null != this.openInTrunk) {
    output.writeFieldBegin('openInTrunk', Thrift.Type.BOOL, 13)
    output.writeBool(this.openInTrunk)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var SharedNotebook = module.exports.SharedNotebook = function(args){
  this.id = null
  this.userId = null
  this.notebookGuid = null
  this.email = null
  this.notebookModifiable = null
  this.requireLogin = null
  this.serviceCreated = null
  this.shareKey = null
  this.username = null
if( args != null ){  if (null != args.id)
  this.id = args.id
  if (null != args.userId)
  this.userId = args.userId
  if (null != args.notebookGuid)
  this.notebookGuid = args.notebookGuid
  if (null != args.email)
  this.email = args.email
  if (null != args.notebookModifiable)
  this.notebookModifiable = args.notebookModifiable
  if (null != args.requireLogin)
  this.requireLogin = args.requireLogin
  if (null != args.serviceCreated)
  this.serviceCreated = args.serviceCreated
  if (null != args.shareKey)
  this.shareKey = args.shareKey
  if (null != args.username)
  this.username = args.username
}}
SharedNotebook.prototype = {}
SharedNotebook.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.userId = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.BOOL) {
        this.notebookModifiable = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.BOOL) {
        this.requireLogin = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.I64) {
        this.serviceCreated = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.STRING) {
        this.shareKey = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

SharedNotebook.prototype.write = function(output){ 
  output.writeStructBegin('SharedNotebook')
  if (null != this.id) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1)
    output.writeI64(this.id)
    output.writeFieldEnd()
  }
  if (null != this.userId) {
    output.writeFieldBegin('userId', Thrift.Type.I32, 2)
    output.writeI32(this.userId)
    output.writeFieldEnd()
  }
  if (null != this.notebookGuid) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 3)
    output.writeString(this.notebookGuid)
    output.writeFieldEnd()
  }
  if (null != this.email) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 4)
    output.writeString(this.email)
    output.writeFieldEnd()
  }
  if (null != this.notebookModifiable) {
    output.writeFieldBegin('notebookModifiable', Thrift.Type.BOOL, 5)
    output.writeBool(this.notebookModifiable)
    output.writeFieldEnd()
  }
  if (null != this.requireLogin) {
    output.writeFieldBegin('requireLogin', Thrift.Type.BOOL, 6)
    output.writeBool(this.requireLogin)
    output.writeFieldEnd()
  }
  if (null != this.serviceCreated) {
    output.writeFieldBegin('serviceCreated', Thrift.Type.I64, 7)
    output.writeI64(this.serviceCreated)
    output.writeFieldEnd()
  }
  if (null != this.shareKey) {
    output.writeFieldBegin('shareKey', Thrift.Type.STRING, 8)
    output.writeString(this.shareKey)
    output.writeFieldEnd()
  }
  if (null != this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 9)
    output.writeString(this.username)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var LinkedNotebook = module.exports.LinkedNotebook = function(args){
  this.shareName = null
  this.username = null
  this.shardId = null
  this.shareKey = null
  this.uri = null
  this.guid = null
  this.updateSequenceNum = null
if( args != null ){  if (null != args.shareName)
  this.shareName = args.shareName
  if (null != args.username)
  this.username = args.username
  if (null != args.shardId)
  this.shardId = args.shardId
  if (null != args.shareKey)
  this.shareKey = args.shareKey
  if (null != args.uri)
  this.uri = args.uri
  if (null != args.guid)
  this.guid = args.guid
  if (null != args.updateSequenceNum)
  this.updateSequenceNum = args.updateSequenceNum
}}
LinkedNotebook.prototype = {}
LinkedNotebook.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.shareName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.shardId = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.STRING) {
        this.shareKey = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

LinkedNotebook.prototype.write = function(output){ 
  output.writeStructBegin('LinkedNotebook')
  if (null != this.shareName) {
    output.writeFieldBegin('shareName', Thrift.Type.STRING, 2)
    output.writeString(this.shareName)
    output.writeFieldEnd()
  }
  if (null != this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3)
    output.writeString(this.username)
    output.writeFieldEnd()
  }
  if (null != this.shardId) {
    output.writeFieldBegin('shardId', Thrift.Type.STRING, 4)
    output.writeString(this.shardId)
    output.writeFieldEnd()
  }
  if (null != this.shareKey) {
    output.writeFieldBegin('shareKey', Thrift.Type.STRING, 5)
    output.writeString(this.shareKey)
    output.writeFieldEnd()
  }
  if (null != this.uri) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 6)
    output.writeString(this.uri)
    output.writeFieldEnd()
  }
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 7)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  if (null != this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 8)
    output.writeI32(this.updateSequenceNum)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

