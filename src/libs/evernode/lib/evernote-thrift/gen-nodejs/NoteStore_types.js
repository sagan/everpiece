//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var Types_ttypes = require('./Types_types');
var ttypes = module.exports = {};
var SyncState = module.exports.SyncState = function(args){
  this.currentTime = null
  this.fullSyncBefore = null
  this.updateCount = null
  this.uploaded = null
if( args != null ){  if (null != args.currentTime)
  this.currentTime = args.currentTime
  if (null != args.fullSyncBefore)
  this.fullSyncBefore = args.fullSyncBefore
  if (null != args.updateCount)
  this.updateCount = args.updateCount
  if (null != args.uploaded)
  this.uploaded = args.uploaded
}}
SyncState.prototype = {}
SyncState.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I64) {
        this.fullSyncBefore = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I64) {
        this.uploaded = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

SyncState.prototype.write = function(output){ 
  output.writeStructBegin('SyncState')
  if (null != this.currentTime) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1)
    output.writeI64(this.currentTime)
    output.writeFieldEnd()
  }
  if (null != this.fullSyncBefore) {
    output.writeFieldBegin('fullSyncBefore', Thrift.Type.I64, 2)
    output.writeI64(this.fullSyncBefore)
    output.writeFieldEnd()
  }
  if (null != this.updateCount) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 3)
    output.writeI32(this.updateCount)
    output.writeFieldEnd()
  }
  if (null != this.uploaded) {
    output.writeFieldBegin('uploaded', Thrift.Type.I64, 4)
    output.writeI64(this.uploaded)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var SyncChunk = module.exports.SyncChunk = function(args){
  this.currentTime = null
  this.chunkHighUSN = null
  this.updateCount = null
  this.notes = null
  this.notebooks = null
  this.tags = null
  this.searches = null
  this.resources = null
  this.expungedNotes = null
  this.expungedNotebooks = null
  this.expungedTags = null
  this.expungedSearches = null
  this.linkedNotebooks = null
  this.expungedLinkedNotebooks = null
if( args != null ){  if (null != args.currentTime)
  this.currentTime = args.currentTime
  if (null != args.chunkHighUSN)
  this.chunkHighUSN = args.chunkHighUSN
  if (null != args.updateCount)
  this.updateCount = args.updateCount
  if (null != args.notes)
  this.notes = args.notes
  if (null != args.notebooks)
  this.notebooks = args.notebooks
  if (null != args.tags)
  this.tags = args.tags
  if (null != args.searches)
  this.searches = args.searches
  if (null != args.resources)
  this.resources = args.resources
  if (null != args.expungedNotes)
  this.expungedNotes = args.expungedNotes
  if (null != args.expungedNotebooks)
  this.expungedNotebooks = args.expungedNotebooks
  if (null != args.expungedTags)
  this.expungedTags = args.expungedTags
  if (null != args.expungedSearches)
  this.expungedSearches = args.expungedSearches
  if (null != args.linkedNotebooks)
  this.linkedNotebooks = args.linkedNotebooks
  if (null != args.expungedLinkedNotebooks)
  this.expungedLinkedNotebooks = args.expungedLinkedNotebooks
}}
SyncChunk.prototype = {}
SyncChunk.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.chunkHighUSN = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.LIST) {
        {
          var _size0 = 0
          var rtmp3
          this.notes = []
          var _etype3 = 0
          rtmp3 = input.readListBegin()
          _etype3 = rtmp3.etype
          _size0 = rtmp3.size
          for (var _i4 = 0; _i4 < _size0; ++_i4)
          {
            var elem5 = null
            elem5 = new Types_ttypes.Note()
            elem5.read(input)
            this.notes.push(elem5)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.LIST) {
        {
          var _size6 = 0
          var rtmp3
          this.notebooks = []
          var _etype9 = 0
          rtmp3 = input.readListBegin()
          _etype9 = rtmp3.etype
          _size6 = rtmp3.size
          for (var _i10 = 0; _i10 < _size6; ++_i10)
          {
            var elem11 = null
            elem11 = new Types_ttypes.Notebook()
            elem11.read(input)
            this.notebooks.push(elem11)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.LIST) {
        {
          var _size12 = 0
          var rtmp3
          this.tags = []
          var _etype15 = 0
          rtmp3 = input.readListBegin()
          _etype15 = rtmp3.etype
          _size12 = rtmp3.size
          for (var _i16 = 0; _i16 < _size12; ++_i16)
          {
            var elem17 = null
            elem17 = new Types_ttypes.Tag()
            elem17.read(input)
            this.tags.push(elem17)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.LIST) {
        {
          var _size18 = 0
          var rtmp3
          this.searches = []
          var _etype21 = 0
          rtmp3 = input.readListBegin()
          _etype21 = rtmp3.etype
          _size18 = rtmp3.size
          for (var _i22 = 0; _i22 < _size18; ++_i22)
          {
            var elem23 = null
            elem23 = new Types_ttypes.SavedSearch()
            elem23.read(input)
            this.searches.push(elem23)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 8:      if (ftype == Thrift.Type.LIST) {
        {
          var _size24 = 0
          var rtmp3
          this.resources = []
          var _etype27 = 0
          rtmp3 = input.readListBegin()
          _etype27 = rtmp3.etype
          _size24 = rtmp3.size
          for (var _i28 = 0; _i28 < _size24; ++_i28)
          {
            var elem29 = null
            elem29 = new Types_ttypes.Resource()
            elem29.read(input)
            this.resources.push(elem29)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 9:      if (ftype == Thrift.Type.LIST) {
        {
          var _size30 = 0
          var rtmp3
          this.expungedNotes = []
          var _etype33 = 0
          rtmp3 = input.readListBegin()
          _etype33 = rtmp3.etype
          _size30 = rtmp3.size
          for (var _i34 = 0; _i34 < _size30; ++_i34)
          {
            var elem35 = null
            elem35 = input.readString()
            this.expungedNotes.push(elem35)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.LIST) {
        {
          var _size36 = 0
          var rtmp3
          this.expungedNotebooks = []
          var _etype39 = 0
          rtmp3 = input.readListBegin()
          _etype39 = rtmp3.etype
          _size36 = rtmp3.size
          for (var _i40 = 0; _i40 < _size36; ++_i40)
          {
            var elem41 = null
            elem41 = input.readString()
            this.expungedNotebooks.push(elem41)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.LIST) {
        {
          var _size42 = 0
          var rtmp3
          this.expungedTags = []
          var _etype45 = 0
          rtmp3 = input.readListBegin()
          _etype45 = rtmp3.etype
          _size42 = rtmp3.size
          for (var _i46 = 0; _i46 < _size42; ++_i46)
          {
            var elem47 = null
            elem47 = input.readString()
            this.expungedTags.push(elem47)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 12:      if (ftype == Thrift.Type.LIST) {
        {
          var _size48 = 0
          var rtmp3
          this.expungedSearches = []
          var _etype51 = 0
          rtmp3 = input.readListBegin()
          _etype51 = rtmp3.etype
          _size48 = rtmp3.size
          for (var _i52 = 0; _i52 < _size48; ++_i52)
          {
            var elem53 = null
            elem53 = input.readString()
            this.expungedSearches.push(elem53)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 13:      if (ftype == Thrift.Type.LIST) {
        {
          var _size54 = 0
          var rtmp3
          this.linkedNotebooks = []
          var _etype57 = 0
          rtmp3 = input.readListBegin()
          _etype57 = rtmp3.etype
          _size54 = rtmp3.size
          for (var _i58 = 0; _i58 < _size54; ++_i58)
          {
            var elem59 = null
            elem59 = new Types_ttypes.LinkedNotebook()
            elem59.read(input)
            this.linkedNotebooks.push(elem59)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 14:      if (ftype == Thrift.Type.LIST) {
        {
          var _size60 = 0
          var rtmp3
          this.expungedLinkedNotebooks = []
          var _etype63 = 0
          rtmp3 = input.readListBegin()
          _etype63 = rtmp3.etype
          _size60 = rtmp3.size
          for (var _i64 = 0; _i64 < _size60; ++_i64)
          {
            var elem65 = null
            elem65 = input.readString()
            this.expungedLinkedNotebooks.push(elem65)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

SyncChunk.prototype.write = function(output){ 
  output.writeStructBegin('SyncChunk')
  if (null != this.currentTime) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1)
    output.writeI64(this.currentTime)
    output.writeFieldEnd()
  }
  if (null != this.chunkHighUSN) {
    output.writeFieldBegin('chunkHighUSN', Thrift.Type.I32, 2)
    output.writeI32(this.chunkHighUSN)
    output.writeFieldEnd()
  }
  if (null != this.updateCount) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 3)
    output.writeI32(this.updateCount)
    output.writeFieldEnd()
  }
  if (null != this.notes) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 4)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.notes.length)
      {
        for(var iter66 in this.notes)
        {
          if (this.notes.hasOwnProperty(iter66))
          {
            iter66=this.notes[iter66]
            iter66.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.notebooks) {
    output.writeFieldBegin('notebooks', Thrift.Type.LIST, 5)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.notebooks.length)
      {
        for(var iter67 in this.notebooks)
        {
          if (this.notebooks.hasOwnProperty(iter67))
          {
            iter67=this.notebooks[iter67]
            iter67.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.tags) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 6)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.tags.length)
      {
        for(var iter68 in this.tags)
        {
          if (this.tags.hasOwnProperty(iter68))
          {
            iter68=this.tags[iter68]
            iter68.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.searches) {
    output.writeFieldBegin('searches', Thrift.Type.LIST, 7)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.searches.length)
      {
        for(var iter69 in this.searches)
        {
          if (this.searches.hasOwnProperty(iter69))
          {
            iter69=this.searches[iter69]
            iter69.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.resources) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 8)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.resources.length)
      {
        for(var iter70 in this.resources)
        {
          if (this.resources.hasOwnProperty(iter70))
          {
            iter70=this.resources[iter70]
            iter70.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.expungedNotes) {
    output.writeFieldBegin('expungedNotes', Thrift.Type.LIST, 9)
    {
      output.writeListBegin(Thrift.Type.STRING, this.expungedNotes.length)
      {
        for(var iter71 in this.expungedNotes)
        {
          if (this.expungedNotes.hasOwnProperty(iter71))
          {
            iter71=this.expungedNotes[iter71]
            output.writeString(iter71)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.expungedNotebooks) {
    output.writeFieldBegin('expungedNotebooks', Thrift.Type.LIST, 10)
    {
      output.writeListBegin(Thrift.Type.STRING, this.expungedNotebooks.length)
      {
        for(var iter72 in this.expungedNotebooks)
        {
          if (this.expungedNotebooks.hasOwnProperty(iter72))
          {
            iter72=this.expungedNotebooks[iter72]
            output.writeString(iter72)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.expungedTags) {
    output.writeFieldBegin('expungedTags', Thrift.Type.LIST, 11)
    {
      output.writeListBegin(Thrift.Type.STRING, this.expungedTags.length)
      {
        for(var iter73 in this.expungedTags)
        {
          if (this.expungedTags.hasOwnProperty(iter73))
          {
            iter73=this.expungedTags[iter73]
            output.writeString(iter73)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.expungedSearches) {
    output.writeFieldBegin('expungedSearches', Thrift.Type.LIST, 12)
    {
      output.writeListBegin(Thrift.Type.STRING, this.expungedSearches.length)
      {
        for(var iter74 in this.expungedSearches)
        {
          if (this.expungedSearches.hasOwnProperty(iter74))
          {
            iter74=this.expungedSearches[iter74]
            output.writeString(iter74)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.linkedNotebooks) {
    output.writeFieldBegin('linkedNotebooks', Thrift.Type.LIST, 13)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.linkedNotebooks.length)
      {
        for(var iter75 in this.linkedNotebooks)
        {
          if (this.linkedNotebooks.hasOwnProperty(iter75))
          {
            iter75=this.linkedNotebooks[iter75]
            iter75.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.expungedLinkedNotebooks) {
    output.writeFieldBegin('expungedLinkedNotebooks', Thrift.Type.LIST, 14)
    {
      output.writeListBegin(Thrift.Type.STRING, this.expungedLinkedNotebooks.length)
      {
        for(var iter76 in this.expungedLinkedNotebooks)
        {
          if (this.expungedLinkedNotebooks.hasOwnProperty(iter76))
          {
            iter76=this.expungedLinkedNotebooks[iter76]
            output.writeString(iter76)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteFilter = module.exports.NoteFilter = function(args){
  this.order = null
  this.ascending = null
  this.words = null
  this.notebookGuid = null
  this.tagGuids = null
  this.timeZone = null
  this.inactive = null
if( args != null ){  if (null != args.order)
  this.order = args.order
  if (null != args.ascending)
  this.ascending = args.ascending
  if (null != args.words)
  this.words = args.words
  if (null != args.notebookGuid)
  this.notebookGuid = args.notebookGuid
  if (null != args.tagGuids)
  this.tagGuids = args.tagGuids
  if (null != args.timeZone)
  this.timeZone = args.timeZone
  if (null != args.inactive)
  this.inactive = args.inactive
}}
NoteFilter.prototype = {}
NoteFilter.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.BOOL) {
        this.ascending = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.words = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.LIST) {
        {
          var _size77 = 0
          var rtmp3
          this.tagGuids = []
          var _etype80 = 0
          rtmp3 = input.readListBegin()
          _etype80 = rtmp3.etype
          _size77 = rtmp3.size
          for (var _i81 = 0; _i81 < _size77; ++_i81)
          {
            var elem82 = null
            elem82 = input.readString()
            this.tagGuids.push(elem82)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.STRING) {
        this.timeZone = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.BOOL) {
        this.inactive = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteFilter.prototype.write = function(output){ 
  output.writeStructBegin('NoteFilter')
  if (null != this.order) {
    output.writeFieldBegin('order', Thrift.Type.I32, 1)
    output.writeI32(this.order)
    output.writeFieldEnd()
  }
  if (null != this.ascending) {
    output.writeFieldBegin('ascending', Thrift.Type.BOOL, 2)
    output.writeBool(this.ascending)
    output.writeFieldEnd()
  }
  if (null != this.words) {
    output.writeFieldBegin('words', Thrift.Type.STRING, 3)
    output.writeString(this.words)
    output.writeFieldEnd()
  }
  if (null != this.notebookGuid) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 4)
    output.writeString(this.notebookGuid)
    output.writeFieldEnd()
  }
  if (null != this.tagGuids) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 5)
    {
      output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length)
      {
        for(var iter83 in this.tagGuids)
        {
          if (this.tagGuids.hasOwnProperty(iter83))
          {
            iter83=this.tagGuids[iter83]
            output.writeString(iter83)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.timeZone) {
    output.writeFieldBegin('timeZone', Thrift.Type.STRING, 6)
    output.writeString(this.timeZone)
    output.writeFieldEnd()
  }
  if (null != this.inactive) {
    output.writeFieldBegin('inactive', Thrift.Type.BOOL, 7)
    output.writeBool(this.inactive)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteList = module.exports.NoteList = function(args){
  this.startIndex = null
  this.totalNotes = null
  this.notes = null
  this.stoppedWords = null
  this.searchedWords = null
  this.updateCount = null
if( args != null ){  if (null != args.startIndex)
  this.startIndex = args.startIndex
  if (null != args.totalNotes)
  this.totalNotes = args.totalNotes
  if (null != args.notes)
  this.notes = args.notes
  if (null != args.stoppedWords)
  this.stoppedWords = args.stoppedWords
  if (null != args.searchedWords)
  this.searchedWords = args.searchedWords
  if (null != args.updateCount)
  this.updateCount = args.updateCount
}}
NoteList.prototype = {}
NoteList.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size84 = 0
          var rtmp3
          this.notes = []
          var _etype87 = 0
          rtmp3 = input.readListBegin()
          _etype87 = rtmp3.etype
          _size84 = rtmp3.size
          for (var _i88 = 0; _i88 < _size84; ++_i88)
          {
            var elem89 = null
            elem89 = new Types_ttypes.Note()
            elem89.read(input)
            this.notes.push(elem89)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.LIST) {
        {
          var _size90 = 0
          var rtmp3
          this.stoppedWords = []
          var _etype93 = 0
          rtmp3 = input.readListBegin()
          _etype93 = rtmp3.etype
          _size90 = rtmp3.size
          for (var _i94 = 0; _i94 < _size90; ++_i94)
          {
            var elem95 = null
            elem95 = input.readString()
            this.stoppedWords.push(elem95)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.LIST) {
        {
          var _size96 = 0
          var rtmp3
          this.searchedWords = []
          var _etype99 = 0
          rtmp3 = input.readListBegin()
          _etype99 = rtmp3.etype
          _size96 = rtmp3.size
          for (var _i100 = 0; _i100 < _size96; ++_i100)
          {
            var elem101 = null
            elem101 = input.readString()
            this.searchedWords.push(elem101)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteList.prototype.write = function(output){ 
  output.writeStructBegin('NoteList')
  if (null != this.startIndex) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1)
    output.writeI32(this.startIndex)
    output.writeFieldEnd()
  }
  if (null != this.totalNotes) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2)
    output.writeI32(this.totalNotes)
    output.writeFieldEnd()
  }
  if (null != this.notes) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.notes.length)
      {
        for(var iter102 in this.notes)
        {
          if (this.notes.hasOwnProperty(iter102))
          {
            iter102=this.notes[iter102]
            iter102.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.stoppedWords) {
    output.writeFieldBegin('stoppedWords', Thrift.Type.LIST, 4)
    {
      output.writeListBegin(Thrift.Type.STRING, this.stoppedWords.length)
      {
        for(var iter103 in this.stoppedWords)
        {
          if (this.stoppedWords.hasOwnProperty(iter103))
          {
            iter103=this.stoppedWords[iter103]
            output.writeString(iter103)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.searchedWords) {
    output.writeFieldBegin('searchedWords', Thrift.Type.LIST, 5)
    {
      output.writeListBegin(Thrift.Type.STRING, this.searchedWords.length)
      {
        for(var iter104 in this.searchedWords)
        {
          if (this.searchedWords.hasOwnProperty(iter104))
          {
            iter104=this.searchedWords[iter104]
            output.writeString(iter104)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.updateCount) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 6)
    output.writeI32(this.updateCount)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteMetadata = module.exports.NoteMetadata = function(args){
  this.guid = null
  this.title = null
  this.contentLength = null
  this.created = null
  this.updated = null
  this.updateSequenceNum = null
  this.notebookGuid = null
  this.tagGuids = null
  this.attributes = null
  this.largestResourceMime = null
  this.largestResourceSize = null
if( args != null ){  if (null != args.guid)
  this.guid = args.guid
  if (null != args.title)
  this.title = args.title
  if (null != args.contentLength)
  this.contentLength = args.contentLength
  if (null != args.created)
  this.created = args.created
  if (null != args.updated)
  this.updated = args.updated
  if (null != args.updateSequenceNum)
  this.updateSequenceNum = args.updateSequenceNum
  if (null != args.notebookGuid)
  this.notebookGuid = args.notebookGuid
  if (null != args.tagGuids)
  this.tagGuids = args.tagGuids
  if (null != args.attributes)
  this.attributes = args.attributes
  if (null != args.largestResourceMime)
  this.largestResourceMime = args.largestResourceMime
  if (null != args.largestResourceSize)
  this.largestResourceSize = args.largestResourceSize
}}
NoteMetadata.prototype = {}
NoteMetadata.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I32) {
        this.contentLength = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.I64) {
        this.created = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.STRING) {
        this.notebookGuid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 12:      if (ftype == Thrift.Type.LIST) {
        {
          var _size105 = 0
          var rtmp3
          this.tagGuids = []
          var _etype108 = 0
          rtmp3 = input.readListBegin()
          _etype108 = rtmp3.etype
          _size105 = rtmp3.size
          for (var _i109 = 0; _i109 < _size105; ++_i109)
          {
            var elem110 = null
            elem110 = input.readString()
            this.tagGuids.push(elem110)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 14:      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new Types_ttypes.NoteAttributes()
        this.attributes.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 20:      if (ftype == Thrift.Type.STRING) {
        this.largestResourceMime = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 21:      if (ftype == Thrift.Type.I32) {
        this.largestResourceSize = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteMetadata.prototype.write = function(output){ 
  output.writeStructBegin('NoteMetadata')
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  if (null != this.title) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2)
    output.writeString(this.title)
    output.writeFieldEnd()
  }
  if (null != this.contentLength) {
    output.writeFieldBegin('contentLength', Thrift.Type.I32, 5)
    output.writeI32(this.contentLength)
    output.writeFieldEnd()
  }
  if (null != this.created) {
    output.writeFieldBegin('created', Thrift.Type.I64, 6)
    output.writeI64(this.created)
    output.writeFieldEnd()
  }
  if (null != this.updated) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 7)
    output.writeI64(this.updated)
    output.writeFieldEnd()
  }
  if (null != this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 10)
    output.writeI32(this.updateSequenceNum)
    output.writeFieldEnd()
  }
  if (null != this.notebookGuid) {
    output.writeFieldBegin('notebookGuid', Thrift.Type.STRING, 11)
    output.writeString(this.notebookGuid)
    output.writeFieldEnd()
  }
  if (null != this.tagGuids) {
    output.writeFieldBegin('tagGuids', Thrift.Type.LIST, 12)
    {
      output.writeListBegin(Thrift.Type.STRING, this.tagGuids.length)
      {
        for(var iter111 in this.tagGuids)
        {
          if (this.tagGuids.hasOwnProperty(iter111))
          {
            iter111=this.tagGuids[iter111]
            output.writeString(iter111)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.attributes) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 14)
    this.attributes.write(output)
    output.writeFieldEnd()
  }
  if (null != this.largestResourceMime) {
    output.writeFieldBegin('largestResourceMime', Thrift.Type.STRING, 20)
    output.writeString(this.largestResourceMime)
    output.writeFieldEnd()
  }
  if (null != this.largestResourceSize) {
    output.writeFieldBegin('largestResourceSize', Thrift.Type.I32, 21)
    output.writeI32(this.largestResourceSize)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NotesMetadataList = module.exports.NotesMetadataList = function(args){
  this.startIndex = null
  this.totalNotes = null
  this.notes = null
  this.stoppedWords = null
  this.searchedWords = null
  this.updateCount = null
if( args != null ){  if (null != args.startIndex)
  this.startIndex = args.startIndex
  if (null != args.totalNotes)
  this.totalNotes = args.totalNotes
  if (null != args.notes)
  this.notes = args.notes
  if (null != args.stoppedWords)
  this.stoppedWords = args.stoppedWords
  if (null != args.searchedWords)
  this.searchedWords = args.searchedWords
  if (null != args.updateCount)
  this.updateCount = args.updateCount
}}
NotesMetadataList.prototype = {}
NotesMetadataList.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.startIndex = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.totalNotes = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size112 = 0
          var rtmp3
          this.notes = []
          var _etype115 = 0
          rtmp3 = input.readListBegin()
          _etype115 = rtmp3.etype
          _size112 = rtmp3.size
          for (var _i116 = 0; _i116 < _size112; ++_i116)
          {
            var elem117 = null
            elem117 = new ttypes.NoteMetadata()
            elem117.read(input)
            this.notes.push(elem117)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.LIST) {
        {
          var _size118 = 0
          var rtmp3
          this.stoppedWords = []
          var _etype121 = 0
          rtmp3 = input.readListBegin()
          _etype121 = rtmp3.etype
          _size118 = rtmp3.size
          for (var _i122 = 0; _i122 < _size118; ++_i122)
          {
            var elem123 = null
            elem123 = input.readString()
            this.stoppedWords.push(elem123)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.LIST) {
        {
          var _size124 = 0
          var rtmp3
          this.searchedWords = []
          var _etype127 = 0
          rtmp3 = input.readListBegin()
          _etype127 = rtmp3.etype
          _size124 = rtmp3.size
          for (var _i128 = 0; _i128 < _size124; ++_i128)
          {
            var elem129 = null
            elem129 = input.readString()
            this.searchedWords.push(elem129)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.I32) {
        this.updateCount = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NotesMetadataList.prototype.write = function(output){ 
  output.writeStructBegin('NotesMetadataList')
  if (null != this.startIndex) {
    output.writeFieldBegin('startIndex', Thrift.Type.I32, 1)
    output.writeI32(this.startIndex)
    output.writeFieldEnd()
  }
  if (null != this.totalNotes) {
    output.writeFieldBegin('totalNotes', Thrift.Type.I32, 2)
    output.writeI32(this.totalNotes)
    output.writeFieldEnd()
  }
  if (null != this.notes) {
    output.writeFieldBegin('notes', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.notes.length)
      {
        for(var iter130 in this.notes)
        {
          if (this.notes.hasOwnProperty(iter130))
          {
            iter130=this.notes[iter130]
            iter130.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.stoppedWords) {
    output.writeFieldBegin('stoppedWords', Thrift.Type.LIST, 4)
    {
      output.writeListBegin(Thrift.Type.STRING, this.stoppedWords.length)
      {
        for(var iter131 in this.stoppedWords)
        {
          if (this.stoppedWords.hasOwnProperty(iter131))
          {
            iter131=this.stoppedWords[iter131]
            output.writeString(iter131)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.searchedWords) {
    output.writeFieldBegin('searchedWords', Thrift.Type.LIST, 5)
    {
      output.writeListBegin(Thrift.Type.STRING, this.searchedWords.length)
      {
        for(var iter132 in this.searchedWords)
        {
          if (this.searchedWords.hasOwnProperty(iter132))
          {
            iter132=this.searchedWords[iter132]
            output.writeString(iter132)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.updateCount) {
    output.writeFieldBegin('updateCount', Thrift.Type.I32, 6)
    output.writeI32(this.updateCount)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NotesMetadataResultSpec = module.exports.NotesMetadataResultSpec = function(args){
  this.includeTitle = null
  this.includeContentLength = null
  this.includeCreated = null
  this.includeUpdated = null
  this.includeUpdateSequenceNum = null
  this.includeNotebookGuid = null
  this.includeTagGuids = null
  this.includeAttributes = null
  this.includeLargestResourceMime = null
  this.includeLargestResourceSize = null
if( args != null ){  if (null != args.includeTitle)
  this.includeTitle = args.includeTitle
  if (null != args.includeContentLength)
  this.includeContentLength = args.includeContentLength
  if (null != args.includeCreated)
  this.includeCreated = args.includeCreated
  if (null != args.includeUpdated)
  this.includeUpdated = args.includeUpdated
  if (null != args.includeUpdateSequenceNum)
  this.includeUpdateSequenceNum = args.includeUpdateSequenceNum
  if (null != args.includeNotebookGuid)
  this.includeNotebookGuid = args.includeNotebookGuid
  if (null != args.includeTagGuids)
  this.includeTagGuids = args.includeTagGuids
  if (null != args.includeAttributes)
  this.includeAttributes = args.includeAttributes
  if (null != args.includeLargestResourceMime)
  this.includeLargestResourceMime = args.includeLargestResourceMime
  if (null != args.includeLargestResourceSize)
  this.includeLargestResourceSize = args.includeLargestResourceSize
}}
NotesMetadataResultSpec.prototype = {}
NotesMetadataResultSpec.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 2:      if (ftype == Thrift.Type.BOOL) {
        this.includeTitle = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.BOOL) {
        this.includeContentLength = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.BOOL) {
        this.includeCreated = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 7:      if (ftype == Thrift.Type.BOOL) {
        this.includeUpdated = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 10:      if (ftype == Thrift.Type.BOOL) {
        this.includeUpdateSequenceNum = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 11:      if (ftype == Thrift.Type.BOOL) {
        this.includeNotebookGuid = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 12:      if (ftype == Thrift.Type.BOOL) {
        this.includeTagGuids = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 14:      if (ftype == Thrift.Type.BOOL) {
        this.includeAttributes = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 20:      if (ftype == Thrift.Type.BOOL) {
        this.includeLargestResourceMime = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 21:      if (ftype == Thrift.Type.BOOL) {
        this.includeLargestResourceSize = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NotesMetadataResultSpec.prototype.write = function(output){ 
  output.writeStructBegin('NotesMetadataResultSpec')
  if (null != this.includeTitle) {
    output.writeFieldBegin('includeTitle', Thrift.Type.BOOL, 2)
    output.writeBool(this.includeTitle)
    output.writeFieldEnd()
  }
  if (null != this.includeContentLength) {
    output.writeFieldBegin('includeContentLength', Thrift.Type.BOOL, 5)
    output.writeBool(this.includeContentLength)
    output.writeFieldEnd()
  }
  if (null != this.includeCreated) {
    output.writeFieldBegin('includeCreated', Thrift.Type.BOOL, 6)
    output.writeBool(this.includeCreated)
    output.writeFieldEnd()
  }
  if (null != this.includeUpdated) {
    output.writeFieldBegin('includeUpdated', Thrift.Type.BOOL, 7)
    output.writeBool(this.includeUpdated)
    output.writeFieldEnd()
  }
  if (null != this.includeUpdateSequenceNum) {
    output.writeFieldBegin('includeUpdateSequenceNum', Thrift.Type.BOOL, 10)
    output.writeBool(this.includeUpdateSequenceNum)
    output.writeFieldEnd()
  }
  if (null != this.includeNotebookGuid) {
    output.writeFieldBegin('includeNotebookGuid', Thrift.Type.BOOL, 11)
    output.writeBool(this.includeNotebookGuid)
    output.writeFieldEnd()
  }
  if (null != this.includeTagGuids) {
    output.writeFieldBegin('includeTagGuids', Thrift.Type.BOOL, 12)
    output.writeBool(this.includeTagGuids)
    output.writeFieldEnd()
  }
  if (null != this.includeAttributes) {
    output.writeFieldBegin('includeAttributes', Thrift.Type.BOOL, 14)
    output.writeBool(this.includeAttributes)
    output.writeFieldEnd()
  }
  if (null != this.includeLargestResourceMime) {
    output.writeFieldBegin('includeLargestResourceMime', Thrift.Type.BOOL, 20)
    output.writeBool(this.includeLargestResourceMime)
    output.writeFieldEnd()
  }
  if (null != this.includeLargestResourceSize) {
    output.writeFieldBegin('includeLargestResourceSize', Thrift.Type.BOOL, 21)
    output.writeBool(this.includeLargestResourceSize)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteCollectionCounts = module.exports.NoteCollectionCounts = function(args){
  this.notebookCounts = null
  this.tagCounts = null
  this.trashCount = null
if( args != null ){  if (null != args.notebookCounts)
  this.notebookCounts = args.notebookCounts
  if (null != args.tagCounts)
  this.tagCounts = args.tagCounts
  if (null != args.trashCount)
  this.trashCount = args.trashCount
}}
NoteCollectionCounts.prototype = {}
NoteCollectionCounts.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.MAP) {
        {
          var _size133 = 0
          var rtmp3
          this.notebookCounts = {}
          var _ktype134 = 0
          var _vtype135 = 0
          rtmp3 = input.readMapBegin()
          _ktype134= rtmp3.ktype
          _vtype135= rtmp3.vtype
          _size133= rtmp3.size
          for (var _i137 = 0; _i137 < _size133; ++_i137)
          {
            key138 = null
            val139 = null
            key138 = input.readString()
            val139 = input.readI32()
            this.notebookCounts[key138] = val139
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.MAP) {
        {
          var _size140 = 0
          var rtmp3
          this.tagCounts = {}
          var _ktype141 = 0
          var _vtype142 = 0
          rtmp3 = input.readMapBegin()
          _ktype141= rtmp3.ktype
          _vtype142= rtmp3.vtype
          _size140= rtmp3.size
          for (var _i144 = 0; _i144 < _size140; ++_i144)
          {
            key145 = null
            val146 = null
            key145 = input.readString()
            val146 = input.readI32()
            this.tagCounts[key145] = val146
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.trashCount = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteCollectionCounts.prototype.write = function(output){ 
  output.writeStructBegin('NoteCollectionCounts')
  if (null != this.notebookCounts) {
    output.writeFieldBegin('notebookCounts', Thrift.Type.MAP, 1)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.notebookCounts))
      {
        for(var kiter147 in this.notebookCounts)        {
          if (this.notebookCounts.hasOwnProperty(kiter147))
          {
            var viter148 = this.notebookCounts[kiter147]
            output.writeString(kiter147)
            output.writeI32(viter148)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.tagCounts) {
    output.writeFieldBegin('tagCounts', Thrift.Type.MAP, 2)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.tagCounts))
      {
        for(var kiter149 in this.tagCounts)        {
          if (this.tagCounts.hasOwnProperty(kiter149))
          {
            var viter150 = this.tagCounts[kiter149]
            output.writeString(kiter149)
            output.writeI32(viter150)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.trashCount) {
    output.writeFieldBegin('trashCount', Thrift.Type.I32, 3)
    output.writeI32(this.trashCount)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var AdImpressions = module.exports.AdImpressions = function(args){
  this.adId = null
  this.impressionCount = null
  this.impressionTime = null
if( args != null ){  if (null != args.adId)
  this.adId = args.adId
  if (null != args.impressionCount)
  this.impressionCount = args.impressionCount
  if (null != args.impressionTime)
  this.impressionTime = args.impressionTime
}}
AdImpressions.prototype = {}
AdImpressions.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.adId = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.impressionCount = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I32) {
        this.impressionTime = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

AdImpressions.prototype.write = function(output){ 
  output.writeStructBegin('AdImpressions')
  if (null != this.adId) {
    output.writeFieldBegin('adId', Thrift.Type.I32, 1)
    output.writeI32(this.adId)
    output.writeFieldEnd()
  }
  if (null != this.impressionCount) {
    output.writeFieldBegin('impressionCount', Thrift.Type.I32, 2)
    output.writeI32(this.impressionCount)
    output.writeFieldEnd()
  }
  if (null != this.impressionTime) {
    output.writeFieldBegin('impressionTime', Thrift.Type.I32, 3)
    output.writeI32(this.impressionTime)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var AdParameters = module.exports.AdParameters = function(args){
  this.clientLanguage = null
  this.impressions = null
  this.supportHtml = null
  this.clientProperties = null
if( args != null ){  if (null != args.clientLanguage)
  this.clientLanguage = args.clientLanguage
  if (null != args.impressions)
  this.impressions = args.impressions
  if (null != args.supportHtml)
  this.supportHtml = args.supportHtml
  if (null != args.clientProperties)
  this.clientProperties = args.clientProperties
}}
AdParameters.prototype = {}
AdParameters.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.clientLanguage = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.LIST) {
        {
          var _size151 = 0
          var rtmp3
          this.impressions = []
          var _etype154 = 0
          rtmp3 = input.readListBegin()
          _etype154 = rtmp3.etype
          _size151 = rtmp3.size
          for (var _i155 = 0; _i155 < _size151; ++_i155)
          {
            var elem156 = null
            elem156 = new ttypes.AdImpressions()
            elem156.read(input)
            this.impressions.push(elem156)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.BOOL) {
        this.supportHtml = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.MAP) {
        {
          var _size157 = 0
          var rtmp3
          this.clientProperties = {}
          var _ktype158 = 0
          var _vtype159 = 0
          rtmp3 = input.readMapBegin()
          _ktype158= rtmp3.ktype
          _vtype159= rtmp3.vtype
          _size157= rtmp3.size
          for (var _i161 = 0; _i161 < _size157; ++_i161)
          {
            key162 = null
            val163 = null
            key162 = input.readString()
            val163 = input.readString()
            this.clientProperties[key162] = val163
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

AdParameters.prototype.write = function(output){ 
  output.writeStructBegin('AdParameters')
  if (null != this.clientLanguage) {
    output.writeFieldBegin('clientLanguage', Thrift.Type.STRING, 2)
    output.writeString(this.clientLanguage)
    output.writeFieldEnd()
  }
  if (null != this.impressions) {
    output.writeFieldBegin('impressions', Thrift.Type.LIST, 4)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.impressions.length)
      {
        for(var iter164 in this.impressions)
        {
          if (this.impressions.hasOwnProperty(iter164))
          {
            iter164=this.impressions[iter164]
            iter164.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.supportHtml) {
    output.writeFieldBegin('supportHtml', Thrift.Type.BOOL, 5)
    output.writeBool(this.supportHtml)
    output.writeFieldEnd()
  }
  if (null != this.clientProperties) {
    output.writeFieldBegin('clientProperties', Thrift.Type.MAP, 6)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.clientProperties))
      {
        for(var kiter165 in this.clientProperties)        {
          if (this.clientProperties.hasOwnProperty(kiter165))
          {
            var viter166 = this.clientProperties[kiter165]
            output.writeString(kiter165)
            output.writeString(viter166)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteEmailParameters = module.exports.NoteEmailParameters = function(args){
  this.guid = null
  this.note = null
  this.toAddresses = null
  this.ccAddresses = null
  this.subject = null
  this.message = null
if( args != null ){  if (null != args.guid)
  this.guid = args.guid
  if (null != args.note)
  this.note = args.note
  if (null != args.toAddresses)
  this.toAddresses = args.toAddresses
  if (null != args.ccAddresses)
  this.ccAddresses = args.ccAddresses
  if (null != args.subject)
  this.subject = args.subject
  if (null != args.message)
  this.message = args.message
}}
NoteEmailParameters.prototype = {}
NoteEmailParameters.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.note = new Types_ttypes.Note()
        this.note.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size167 = 0
          var rtmp3
          this.toAddresses = []
          var _etype170 = 0
          rtmp3 = input.readListBegin()
          _etype170 = rtmp3.etype
          _size167 = rtmp3.size
          for (var _i171 = 0; _i171 < _size167; ++_i171)
          {
            var elem172 = null
            elem172 = input.readString()
            this.toAddresses.push(elem172)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.LIST) {
        {
          var _size173 = 0
          var rtmp3
          this.ccAddresses = []
          var _etype176 = 0
          rtmp3 = input.readListBegin()
          _etype176 = rtmp3.etype
          _size173 = rtmp3.size
          for (var _i177 = 0; _i177 < _size173; ++_i177)
          {
            var elem178 = null
            elem178 = input.readString()
            this.ccAddresses.push(elem178)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.STRING) {
        this.subject = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteEmailParameters.prototype.write = function(output){ 
  output.writeStructBegin('NoteEmailParameters')
  if (null != this.guid) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1)
    output.writeString(this.guid)
    output.writeFieldEnd()
  }
  if (null != this.note) {
    output.writeFieldBegin('note', Thrift.Type.STRUCT, 2)
    this.note.write(output)
    output.writeFieldEnd()
  }
  if (null != this.toAddresses) {
    output.writeFieldBegin('toAddresses', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.toAddresses.length)
      {
        for(var iter179 in this.toAddresses)
        {
          if (this.toAddresses.hasOwnProperty(iter179))
          {
            iter179=this.toAddresses[iter179]
            output.writeString(iter179)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.ccAddresses) {
    output.writeFieldBegin('ccAddresses', Thrift.Type.LIST, 4)
    {
      output.writeListBegin(Thrift.Type.STRING, this.ccAddresses.length)
      {
        for(var iter180 in this.ccAddresses)
        {
          if (this.ccAddresses.hasOwnProperty(iter180))
          {
            iter180=this.ccAddresses[iter180]
            output.writeString(iter180)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.subject) {
    output.writeFieldBegin('subject', Thrift.Type.STRING, 5)
    output.writeString(this.subject)
    output.writeFieldEnd()
  }
  if (null != this.message) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 6)
    output.writeString(this.message)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var NoteVersionId = module.exports.NoteVersionId = function(args){
  this.updateSequenceNum = null
  this.updated = null
  this.saved = null
  this.title = null
if( args != null ){  if (null != args.updateSequenceNum)
  this.updateSequenceNum = args.updateSequenceNum
  if (null != args.updated)
  this.updated = args.updated
  if (null != args.saved)
  this.saved = args.saved
  if (null != args.title)
  this.title = args.title
}}
NoteVersionId.prototype = {}
NoteVersionId.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.updateSequenceNum = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I64) {
        this.updated = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I64) {
        this.saved = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

NoteVersionId.prototype.write = function(output){ 
  output.writeStructBegin('NoteVersionId')
  if (null != this.updateSequenceNum) {
    output.writeFieldBegin('updateSequenceNum', Thrift.Type.I32, 1)
    output.writeI32(this.updateSequenceNum)
    output.writeFieldEnd()
  }
  if (null != this.updated) {
    output.writeFieldBegin('updated', Thrift.Type.I64, 2)
    output.writeI64(this.updated)
    output.writeFieldEnd()
  }
  if (null != this.saved) {
    output.writeFieldBegin('saved', Thrift.Type.I64, 3)
    output.writeI64(this.saved)
    output.writeFieldEnd()
  }
  if (null != this.title) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 4)
    output.writeString(this.title)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

